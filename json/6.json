{
    "article_id": "7133520098123317256",
    "audit_status": 2,
    "brief_content": "\u4eca\u5929\u6211\u4eec\u7684\u4e3b\u89d2\u662f gomonkey\uff0c\u4e00\u4e2a\u7528\u6765\u505a monkey patching \u7684\u6d4b\u8bd5\u5e93\u3002\u76ee\u6807\u662f\u8ba9\u7528\u6237\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f4e\u6210\u672c\u7684\u5b8c\u6210\u6253\u6869\uff0c\u4ece\u800c\u5c06\u7cbe\u529b\u805a\u7126\u4e8e\u4e1a\u52a1\u529f\u80fd\u7684\u5f00\u53d1\u3002",
    "category_id": "6809637769959178254",
    "collect_count": 2,
    "comment_count": 0,
    "content": "",
    "cover_image": "",
    "ctime": "1660902111",
    "digg_count": 2,
    "display_count": 0,
    "draft_id": "7133405969563779079",
    "hot_index": 8,
    "is_english": 0,
    "is_gfw": 0,
    "is_hot": 0,
    "is_markdown": 1,
    "is_original": 1,
    "link_url": "",
    "mark_content": "---\ntheme: channing-cyan\n---\n\u643a\u624b\u521b\u4f5c\uff0c\u5171\u540c\u6210\u957f\uff01\u8fd9\u662f\u6211\u53c2\u4e0e\u300c\u6398\u91d1\u65e5\u65b0\u8ba1\u5212 \u00b7 8 \u6708\u66f4\u6587\u6311\u6218\u300d\u7684\u7b2c24\u5929\uff0c[\u70b9\u51fb\u67e5\u770b\u6d3b\u52a8\u8be6\u60c5](https://juejin.cn/post/7123120819437322247 \"https://juejin.cn/post/7123120819437322247\")\n\n\u4eca\u5929\u7ee7\u7eed\u6211\u4eec\u7684\u3010\u89e3\u6790 Golang \u6d4b\u8bd5\u3011\u4e4b\u65c5\uff0c\u7ecf\u8fc7\u524d\u9762\u7684\u6587\u7ae0\uff0c\u76f8\u4fe1\u5927\u5bb6\u5bf9\u4e8e\u5355\u6d4b\u7684\u6982\u5ff5\uff0c\u539f\u751f\u652f\u6301\uff0c\u4ee5\u53ca\u5e38\u89c1\u7684 fake\uff0cmock \u65b9\u6848\u90fd\u6709\u4e86\u4e00\u5b9a\u4e86\u89e3\u3002\u8fd8\u4e0d\u719f\u6089\u7684\u540c\u5b66\u5efa\u8bae\u56de\u987e\u4e00\u4e0b\u6211\u4eec\u6b64\u524d\u7684\u6587\u7ae0\u3002\n\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff081\uff09- \u539f\u751f\u652f\u6301](https://juejin.cn/post/7088592013339131912 \"https://juejin.cn/post/7088592013339131912\")\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff082\uff09- gomock](https://juejin.cn/post/7088905794607513608 \"https://juejin.cn/post/7088905794607513608\")\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff083\uff09- goconvey \u5b9e\u6218](https://juejin.cn/post/7130533292310265886 \"https://juejin.cn/post/7130533292310265886\")\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff084\uff09- \u4e00\u7bc7\u6587\u7ae0\u6559\u4f60\u5206\u6e05 Mock\uff0cStub\uff0cFake](https://juejin.cn/post/7130831772916383774 \"https://juejin.cn/post/7130831772916383774\")\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff085\uff09- MySQL \u7ecf\u5178 mock driver\u2014\u2014 sqlmock](https://juejin.cn/post/7131258433948352520 \"https://juejin.cn/post/7131258433948352520\")\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff086\uff09- \u5982\u4f55\u9488\u5bf9 MySQL \u8fdb\u884c Fake \u6d4b\u8bd5](https://juejin.cn/post/7131661977310461965 \"https://juejin.cn/post/7131661977310461965\")\n-   [\u89e3\u6790 Golang \u6d4b\u8bd5\uff087\uff09- \u5982\u4f55\u9488\u5bf9 Redis \u8fdb\u884c Fake \u6d4b\u8bd5](https://juejin.cn/post/7131933251538518029)\n\n\u4eca\u5929\u6211\u4eec\u7684\u4e3b\u89d2\u662f gomonkey\uff0c\u4e00\u4e2a\u7528\u6765\u505a monkey patching \u7684\u6d4b\u8bd5\u5e93\uff0c\u8fd9\u91cc\u5927\u5bb6\u53ef\u80fd\u5bf9 monkey patching \u7684\u6982\u5ff5\u4e0d\u592a\u719f\u6089\uff0c\u4e0d\u8981\u7740\u6025\uff0c\u6211\u4eec\u4e0b\u4e00\u8282\u5c31\u4f1a\u4e86\u89e3\u3002\u4ece\u4e00\u4e2a\u4e1a\u52a1\u5f00\u53d1\u8005\u7684\u89d2\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a gomonkey \u63d0\u4f9b\u4e86\u5728\u8fd0\u884c\u65f6\u70ed\u66ff\u6362\u539f\u6709\u5b9e\u73b0\uff08\u5305\u542b\u53d8\u91cf\uff0c\u51fd\u6570\uff0c\u65b9\u6cd5\u7b49\uff09\u7684\u80fd\u529b\uff0c\u4ece Test Double \u7684\u89d2\u5ea6\u770b\uff0c\u5176\u5b9e gomonkey \u8d77\u5230\u7684\u4f5c\u7528\u8ddf gomock \u6709\u70b9\u50cf\uff0c\u4f46\u8fd8\u4e0d\u5b8c\u5168\u4e00\u6837\u3002\n\n- gomock \u662f\u57fa\u4e8e interface \u751f\u6210\u53e6\u4e00\u5957 mock \u5b9e\u73b0\uff0c\u6211\u4eec\u5355\u6d4b\u7684\u65f6\u5019\u9700\u8981\u4f9d\u8d56\u8fd9\u4e2a mock \u7684\u5b9e\u73b0\uff0c\u91c7\u7528\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u6765\u8c03\u6574\u5176\u4ed6\u90e8\u5206\u5bf9\u4e8e\u8be5\u63a5\u53e3\u7684\u4f9d\u8d56\uff1b\n- gomonkey \u5219\u662f\u76f4\u63a5\u5728\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u70ed\u66ff\u6362\u7684\u65b9\u5f0f\uff0c\u628a\u53d8\u91cf/\u51fd\u6570/\u65b9\u6cd5\u7684\u5185\u5bb9\u7ed9\u66ff\u6362\u4e86\uff0c\u5728 Reset \u56de\u6765\u524d\uff0c\u6211\u4eec\u76f4\u63a5\u8c03\u7528\u8001\u51fd\u6570\uff0c\u8001\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u5df2\u7ecf\u662f\u65b0\u7684\uff0c\u88ab\u66ff\u6362\u7684\u5b9e\u73b0\u4e86\u3002\n\n\u800c goconvey \u548c\u8fd9\u4e24\u4e2a\u5219\u4e0d\u5728\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5927\u4f53\u5206\u7c7b\u4e0a\u8bf4\uff0cgomock \u548c gomonkey \u90fd\u5c5e\u4e8e\u5728 Test Double \u65b9\u9762\u63d0\u4f9b\u80fd\u529b\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u8bf4\u7684\uff0c\u5e7f\u4e49\u7684 mock\uff0c\u6709\u4e86\u8fd9\u4e24\u4e2a\u5e93\uff0c\u4f60\u5c31\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u5957\u5b9e\u73b0\u6765\u8fdb\u884c\u66ff\u6362\u4e86\u3002\n\ngoconvey \u5219\u662f\u4e00\u4e2a\u3010\u6d4b\u8bd5\u6846\u67b6\u3011\uff0c\u63d0\u4f9b\u4e86 Convey \u548c So \u6765\u642d\u914d\u4f7f\u7528\uff0c\u6811\u5f62\u7ed3\u6784\u65b9\u4fbf\u6784\u9020\u5404\u79cd\u573a\u666f\u3002\u5b83\u672c\u8eab\u662f\u4e0d\u4f1a\u63d0\u4f9b mock \u80fd\u529b\u7684\uff0c\u4f60\u53ef\u4ee5\u57fa\u4e8e goconvey \u6765\u7ec4\u7ec7\u4f60\u7684\u5355\u6d4b\uff0c\u5728\u9700\u8981 mock \u7684\u65f6\u5019\u9009\u7528 gomock\uff0cgomonkey \u6216\u8005\u5176\u4ed6\u6211\u4eec\u4ecb\u7ecd\u8fc7\u7684\u5b9e\u73b0\u3002\n\n\n\u597d\u4e86\uff0c\u8fd9\u91cc\u662f\u4e00\u70b9\u6982\u5ff5\u7684\u62c6\u89e3\uff0c\u6211\u4eec\u4e0b\u6765\u8fdb\u5165\u6b63\u9898\uff0c\u770b\u770b gomonkey \u80fd\u5e26\u6765\u4ec0\u4e48\u80fd\u529b\uff0c\u600e\u4e48\u7528\u3002\n\n\n# Monkey Patching\n\n\u8981\u804a gomonkey\uff0c\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u5b83\u652f\u6301\u7684\u3010Monkey Patching\u3011\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u5728 Golang \u4e2d\u5982\u4f55\u843d\u5730\u3002\u5148\u6765\u770b\u770b [\u7ef4\u57fa\u767e\u79d1](https://en.wikipedia.org/wiki/Monkey_patch) \u4e2d\u7684\u89e3\u91ca\uff1a\n\n> A monkey patch is a way for a program to extend or modify supporting system software locally (affecting only the running instance of the program).\n> \n> The definition of the term varies depending upon the community using it. In Ruby,[2] Python,[3] and many other dynamic programming languages, the term monkey patch only refers to dynamic modifications of a class or module at runtime, motivated by the intent to patch existing third-party code as a workaround to a bug or feature which does not act as desired.\n\n\nmonkey patch \u5c31\u662f\u5728\u8fd0\u884c\u65f6\uff0c\u52a8\u6001\u4fee\u6539\u4e00\u4e9b\u53d8\u91cf/\u51fd\u6570/\u65b9\u6cd5/\u6a21\u5757 \u7684\u884c\u4e3a\u7684\u80fd\u529b\u3002\u5bf9\u4e8e\u6709\u4e9b\u4e09\u65b9\u7684\u5e93\uff0c\u6211\u4eec\u6ca1\u6709\u6743\u9650\u53bb\u8c03\u6574\u4ee3\u7801\u903b\u8f91\uff0c\u800c\u8fd9\u53c8\u4f1a\u5bf9\u6211\u4eec\u6d4b\u8bd5\u5e26\u6765\u5f71\u54cd\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u901a\u8fc7\u3010\u8fd0\u884c\u65f6\u66ff\u6362\u3011\u7684\u65b9\u6cd5\u6765\u6539\u6389\u8fd9\u4e9b\u5b9e\u4f53\u7684\u884c\u4e3a\u3002\n\n\u867d\u7136\u53d8\u91cf\u6211\u4eec\u6709\u65f6\u5019\u4e5f\u4f1a\u6d89\u53ca\uff0c\u4f46\u5176\u5b9e mock \u7684\u4e3b\u4f53\u8fd8\u662f\u51fd\u6570\uff0c\u6240\u4ee5\u7b80\u5316\u4e00\u4e0b\u8bc9\u6c42\u5c31\u53d8\u6210\uff1a\u5728\u8fd0\u884c\u65f6\u5c06\u539f\u672c\u9700\u8981\u8c03\u7528\u7684\u51fd\u6570\u66ff\u6362\u6210\u53e6\u4e00\u4e2a\u51fd\u6570\u3002\n\n\u5728 Golang \u4e2d\u505a monkey patching \u7684\u539f\u7406\u6bd4\u8f83\u590d\u6742\uff0c\u8981\u89e3\u91ca\u6e05\u695a\u7684\u8bdd\u8981\u4e0b\u6c89\u5230\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u6682\u65f6\u7565\u8fc7\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u7167\u8377\u5170\u5de5\u7a0b\u5e08 [Bouke](https://github.com/bouk) \u7684 [blog](https://bou.ke/blog/monkey-patching-in-go/) \u6765\u4e86\u89e3\u4e00\u4e0b\u3002\n\n\n# gomonkey\n\n\n> gomonkey is a library to make monkey patching in unit tests easy.\n>\n> - support a patch for a function\n> - support a patch for a public member method\n> - support a patch for a private member method\n> - support a patch for a interface\n> - support a patch for a function variable\n> - support a patch for a global variable\n> - support patches of a specified sequence for a function\n> - support patches of a specified sequence for a member method\n> - support patches of a specified sequence for a interface\n> - support patches of a specified sequence for a function variable\n\n[gomonkey](https://github.com/agiledragon/gomonkey) \u5c31\u662f\u5728 Golang \u4e0b\u5bf9 monkey patching \u8fdb\u884c\u652f\u6301\u7684\u6d4b\u8bd5\u5e93\uff0c\u4e00\u4e2a\u6253\u6869\u6846\u67b6\u3002\u76ee\u6807\u662f\u8ba9\u7528\u6237\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f4e\u6210\u672c\u7684\u5b8c\u6210\u6253\u6869\uff0c\u4ece\u800c\u5c06\u7cbe\u529b\u805a\u7126\u4e8e\u4e1a\u52a1\u529f\u80fd\u7684\u5f00\u53d1\u3002\n\n\u8fd9\u662f\u7531\u56fd\u4eba\u5927\u4f6c [\u5f20\u6653\u9f99](https://www.jianshu.com/u/1381dc29fed9) \u5f00\u53d1\u7684\u5e93\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u57fa\u672c\u4e0a\u4e00\u4e2a\u5f00\u53d1\u8005\u80fd\u9047\u5230\u7684\u5404\u79cd\u573a\u666f\uff0c\u90fd\u5df2\u7ecf\u88ab gomonkey \u8986\u76d6\u3002\u5305\u62ec\u51fd\u6570\uff0c\u5bfc\u51fa\u65b9\u6cd5\uff0c\u79c1\u6709\u65b9\u6cd5\uff0c\u63a5\u53e3\uff0c\u51fd\u6570\u53c2\u6570\uff0c\u5168\u5c40\u53d8\u91cf\u7b49\u3002\n\n# \u5b9e\u6218\u7528\u6cd5\n\n\u4f7f\u7528\u524d\u6211\u4eec\u8fd8\u662f\u7528 go get \u6dfb\u52a0\u4e00\u4e0b\u4f9d\u8d56\uff1a\n\n```\ngo get github.com/agiledragon/gomonkey/v2@v2.2.0\n```\n\n\u6709\u4e00\u70b9\u4e00\u5b9a\u8981\u6ce8\u610f\uff0cgolang\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u8fdb\u884c\u5185\u8054\u4f18\u5316\uff0c\u5373\u628a\u7b80\u77ed\u7684\u51fd\u6570\u5728\u8c03\u7528\u5b83\u7684\u5730\u65b9\u5c55\u5f00\uff0c\u4ece\u800c\u6d88\u9664\u8c03\u7528\u76ee\u6807\u51fd\u6570\u7684\u5f00\u9500\u3002\u4f46\u56e0\u4e3a\u5185\u8054\u6d88\u9664\u4e86\u8c03\u7528\u76ee\u6807\u51fd\u6570\u65f6\u7684\u8df3\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u5f97go monkey\u586b\u5145\u5728\u76ee\u6807\u51fd\u6570\u5165\u53e3\u5904\u7684\u6307\u4ee4\u65e0\u6cd5\u6267\u884c\uff0c\u56e0\u800c\u4e5f\u65e0\u6cd5\u5b9e\u73b0\u51fd\u6570\u4f53\u7684\u8fd0\u884c\u65f6\u66ff\u6362\uff0c\u4f7fgo monkey\u5931\u6548\u3002\u6240\u4ee5\uff0c\u6267\u884c\u6d4b\u8bd5 case \u524d\u4e00\u5b9a\u8981\u6ce8\u610f\u52a0\u4e0a -gcflags=all=-l\n\n```\ngo test -gcflags=all=-l\n```\n\n\u5b98\u65b9\u7684[\u793a\u4f8b](https://github.com/agiledragon/gomonkey/tree/master/test) \u5176\u5b9e\u5c31\u662f\u4ed6\u4eec\u7684\u5355\u6d4bcase\uff0c\u8fd9\u662f\u5f88\u597d\u7684\u793a\u8303\uff0c\u628a\u5355\u6d4b\u5199\u597d\uff0c\u5199\u5bf9\uff0c\u7528\u5b83\u76f4\u63a5\u6765\u505a\u6587\u6863\uff0c\u6bd4\u5f88\u591a\u65f6\u5019\u6587\u6863\u548c code \u4e0d match \u597d\u7684\u591a\u3002\u5b98\u65b9\u6848\u4f8b\u8fd8\u662f\u7a0d\u5fae\u6709\u70b9\u590d\u6742\u7684\uff0c\u5efa\u8bae\u5927\u5bb6\u5148\u770b\u4e0b\u6211\u4eec\u4e0b\u9762\u7684\u7b80\u5355\u7684\u7528\u6cd5\uff0c\u518d\u8fc7\u4e00\u4e0b\u5b98\u65b9\u901a\u8fc7 goconvey \u7684\u5b9e\u8df5\u3002\n\n## \u51fd\u6570\u6253\u6869\n\n\u7ed9\u51fd\u6570\u6253\u6869\u662f\u6700\u5e38\u89c1\u7684\u573a\u666f\uff0cApplyFunc \u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a\n```\nfunc ApplyFunc(target, double interface{}) *Patches\nfunc (this *Patches) ApplyFunc(target, double interface{}) *Patches\n```\n\nApplyFunc\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u51fd\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6869\u51fd\u6570\u3002\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0cpatches \u5bf9\u8c61\u901a\u8fc7 Reset \u6210\u5458\u65b9\u6cd5\u5220\u9664\u6240\u6709\u6d4b\u8bd5\u6869\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b time.Now() \u8fd4\u56de\u56fa\u5b9a\u65f6\u95f4\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u7684\u5b9e\u73b0\uff0c\u5c31\u53ef\u4ee5\u63d2\u6869\u6765\u6307\u5b9a\u3002\u6700\u540e\u901a\u8fc7 defer \u6765 Reset \u5c31\u597d\u3002[\u5b98\u65b9\u793a\u4f8b](https://github.com/agiledragon/gomonkey/blob/master/test/apply_func_test.go) \n\n```go\nnow := time.Now()\nvar p = gomonkey.ApplyFunc(time.Now, func() time.Time {\n\treturn now\n})\ndefer p.Reset()\n```\n\u8bb0\u5f97\u51fd\u6570\u6e05\u660e\u9700\u8981 match\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a datasource \u5305\u4e0b\u7684 Get \u65b9\u6cd5\uff0c\u7b7e\u540d\u5982\u4e0b\uff1a\n```go\nfunc Get(ctx context.Context, key string) (string, error)\n```\n\u90a3\u4e48\u540c\u6837\uff0c\u5bf9\u9f50\u63d2\u6869\u7684\u65f6\u5019\u4e5f\u8981\u7528\u4e00\u6837\u7684\u7b7e\u540d\uff1a\n```go\nsaveValue := \"\"\nvar p = gomonkey.ApplyFunc(datasource.Get, func(ctx context.Context, key string) (string, error) {\n        return saveValue, nil\n})\ndefer p.Reset()\n```\n\n\u6b64\u5916\uff0cgomonkey \u8fd8\u652f\u6301\u5bf9\u51fd\u6570\u6253\u4e00\u4e2a\u7279\u5b9a\u7684\u6869\u5e8f\u5217\uff1a\n```go\nfunc TestApplyFuncSeq(t *testing.T) {\n  Convey(\"default times is 1\", t, func() {\n    info1 := \"hello cpp\"\n    info2 := \"hello golang\"\n    info3 := \"hello gomonkey\"\n    outputs := []OutputCell{\n      {Values: Params{info1, nil}},\n      {Values: Params{info2, nil}},\n      {Values: Params{info3, nil}},\n    }\n    patches := ApplyFuncSeq(fake.ReadLeaf, outputs)\n    defer patches.Reset()\n    \n    output, err := fake.ReadLeaf(\"\")\n    assert.Equal(t, nil, err)\n    assert.Equal(t, info1, output)\n    \n    output, err = fake.ReadLeaf(\"\")\n    assert.Equal(t, nil, err)\n    assert.Equal(t, info2, output)\n    \n    output, err = fake.ReadLeaf(\"\")\n    assert.Equal(t, nil, err)\n    assert.Equal(t, info3, output)\n  })\n}\n```\n\n## \u65b9\u6cd5\u6253\u6869\n\n\u8fd9\u91cc\u8981\u7528\u5230 ApplyMethod \u7684\u80fd\u529b\uff0c\u7b7e\u540d\u5982\u4e0b\n\n```\nfunc ApplyMethod(target reflect.Type, methodName string, double interface{}) *Patches\nfunc (this *Patches) ApplyMethod(target reflect.Type, methodName string, double interface{}) *Patches\n```\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u76ee\u6807\u7c7b\u7684\u6307\u9488\u53d8\u91cf\u7684\u53cd\u5c04\u7c7b\u578b\uff0c\u53ef\u4ee5\u7528 reflect.TypeOf \u6765\u83b7\u53d6\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u65b9\u6cd5\u540d\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u6869\u51fd\u6570\u3002\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0cpatches \u5bf9\u8c61\u901a\u8fc7 Reset \u6210\u5458\u65b9\u6cd5\u5220\u9664\u6240\u6709\u6d4b\u8bd5\u6869\u3002\n\n\u6211\u4eec\u5728 fake \u5305\u5b9a\u4e49\u4e0b\u9762\u7684\u7ed3\u6784\uff1a\n\n```go\ntype Slice []int\n\nfunc NewSlice() Slice {\n    return make(Slice, 0)\n}\n\nfunc (this* Slice) Add(elem int) error {}\n\nfunc (this* Slice) Remove(elem int) error {}\n\nfunc (this *Slice) Append(elems ...int) int {}\n```\n\n\u4e00\u4e2a\u7c7b\u578b Slice\uff0c\u4ee5\u53ca\u4e0b\u9762\u7684 Add, Remove, Append \u4e09\u4e2a\u65b9\u6cd5\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u7701\u7565\u3002\n\n\u73b0\u5728\u6211\u4eec\u8981\u9488\u5bf9 Add \u65b9\u6cd5\u6765\u6253\u6869\uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a\n\n```go\nslice := fake.NewSlice()\nvar s *fake.Slice\n\npatches := ApplyMethod(reflect.TypeOf(s), \"Add\", func(_ *fake.Slice, _ int) error {\n\treturn nil\n})\ndefer patches.Reset()\n```\n\u6ce8\u610f\uff0c\u4f7f\u7528ApplyMethod\u65f6\uff0creflect.TypeOf(caller)\u7684caller\u5165\u53c2\u548cfunc(_ caller)\u7684caller\u5165\u53c2\u5fc5\u987b\u548c\u539f\u65b9\u6cd5\u4e00\u81f4\uff0c\u539f\u65b9\u6cd5\u91c7\u7528\u7684\u662f\u7ed3\u6784\u4f53\u8c03\u7528\uff0c\u90a3\u4e48caller\u5c31\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53\uff0c\u53cd\u4e4b\u5c31\u90fd\u5f97\u4e3a\u6307\u9488\u3002\n\n\u5b98\u65b9\u5b8c\u6574\u793a\u4f8b\u5982\u4e0b:\n\n```go\nfunc TestApplyMethod(t *testing.T) {\n  slice := fake.NewSlice()\n  var s *fake.Slice\n  Convey(\"TestApplyMethod\", t, func() {\n\n    Convey(\"for succ\", func() {\n      err := slice.Add(1)\n      So(err, ShouldEqual, nil)\n      patches := ApplyMethod(reflect.TypeOf(s), \"Add\", func(_ *fake.Slice, _ int) error {\n        return nil\n      })\n      defer patches.Reset()\n      err = slice.Add(1)\n      assert.Equal(t, nil, err)\n      err = slice.Remove(1)\n      assert.Equal(t, nil, err)\n      assert.Equal(t, 0, len(slice))\n    })\n\n    //\u591a\u65b9\u6cd5\n    Convey(\"two methods\", func() {\n      err := slice.Add(3)\n      assert.Equal(t, nil, err)\n      defer slice.Remove(3)\n      patches := ApplyMethod(reflect.TypeOf(s), \"Add\", func(_ *fake.Slice, _ int) error {\n        return fake.ErrElemExsit\n      })\n      defer patches.Reset()\n      patches.ApplyMethod(reflect.TypeOf(s), \"Remove\", func(_ *fake.Slice, _ int) error {\n        return fake.ErrElemNotExsit\n      })\n      err = slice.Add(2)\n      assert.Equal(t, fake.ErrElemExsit, err)\n      err = slice.Remove(1)\n      assert.Equal(t, fake.ErrElemNotExsit, err)\n      assert.Equal(t, 1, len(slice))\n      assert.Equal(t, 3, slice[0])\n    })\n\n    //\u65b9\u6cd5and\u51fd\u6570\n    Convey(\"one func and one method\", func() {\n      err := slice.Add(4)\n      assert.Equal(t, nil, err)\n      defer slice.Remove(4)\n      patches := ApplyFunc(fake.Exec, func(_ string, _ ...string) (string, error) {\n        return outputExpect, nil\n      })\n      defer patches.Reset()\n      patches.ApplyMethod(reflect.TypeOf(s), \"Remove\", func(_ *fake.Slice, _ int) error {\n        return fake.ErrElemNotExsit\n      })\n      output, err := fake.Exec(\"\", \"\")\n      assert.Equal(t, nil, err)\n      assert.Equal(t, outputExpect, output)\n      err = slice.Remove(1)\n      assert.Equal(t, fake.ErrElemNotExsit, err)\n      assert.Equal(t, 1, len(slice))\n      assert.Equal(t, 4, slice[0])\n    })\n  })\n}\n```\n\n\u7c7b\u4f3c\u7684\uff0cgomonkey \u4e5f\u652f\u6301\u5bf9\u6210\u5458\u65b9\u6cd5\u6253\u7279\u5b9a\u7684\u6869\u5e8f\u5217\uff1a\n\n```\nfunc TestApplyMethodSeq(t *testing.T) {\n  e := &fake.Etcd{}\n  Convey(\"default times is 1\", t, func() {\n    info1 := \"hello cpp\"\n    info2 := \"hello golang\"\n    info3 := \"hello gomonkey\"\n    outputs := []OutputCell{\n      {Values: Params{info1, nil}},\n      {Values: Params{info2, nil}},\n      {Values: Params{info3, nil}},\n    }\n    patches := ApplyMethodSeq(reflect.TypeOf(e), \"Retrieve\", outputs)\n    defer patches.Reset()\n    output, err := e.Retrieve(\"\")\n    assert.Equal(t, nil, err)\n    assert.Equal(t, info1, output)\n    output, err = e.Retrieve(\"\")\n    assert.Equal(t, nil, err)\n    assert.Equal(t, info2, output)\n    output, err = e.Retrieve(\"\")\n    assert.Equal(t, nil, err)\n    assert.Equal(t, info3, output)\n  })\n}\n```\n\n## \u65b9\u6cd5\u6253\u6869\u5347\u7ea7\n\n\u5728 ApplyMethod \u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21 reflect.TypeOf\uff0c\u4ee5\u53ca\u7b7e\u540d\u8981\u4f20 receiver \u8fd8\u662f\u6dfb\u52a0\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\u3002\u4e3a\u6b64\uff0c\u4f5c\u8005\u5bf9 gomonkey \u518d\u5ea6\u5347\u7ea7\u3002\u9000\u51fa\u4e86 ApplyMethodFunc\uff0c\u4ece\u800c\u652f\u6301\u4e86\uff1a\u4e3a method \u6253\u6869\u65f6\u53ef\u4ee5\u4e0d\u4f20\u5165 reflect.TypeOf \u7c7b\u578b\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f20\u5165 receiver \u53c2\u6570\u3002\n\n\u6bd4\u4e0a\u9762 TestApplyMethod \u793a\u4f8b\u4ee3\u7801 ApplyMethod \u7684\u7b2c\u4e09\u4e2a\u51fd\u6570\u53c2\u6570 func(_ *fake.Slice, _ int) error \u5c11\u4e86\u7b2c\u4e00\u4e2a\u5b50\u53c2\u6570 *fake.Slice\uff0c\u800c\u7b80\u5316\u6210 func(_ int) error\u3002\n\n```go\nfunc TestApplyMethodFunc(t *testing.T) {\n    slice := fake.NewSlice()\n    var s *fake.Slice\n    Convey(\"TestApplyMethodFunc\", t, func() {\n        Convey(\"for succ\", func() {\n            err := slice.Add(1)\n            So(err, ShouldEqual, nil)\n            patches := ApplyMethodFunc(s, \"Add\", func(_ int) error {\n                return nil\n            })\n            defer patches.Reset()\n            err = slice.Add(1)\n            So(err, ShouldEqual, nil)\n            err = slice.Remove(1)\n            So(err, ShouldEqual, nil)\n            So(len(slice), ShouldEqual, 0)\n        })\n    })\n}\n```\n\n## \u6307\u5b9a\u8fd4\u56de\u503c\n\n\u5982\u679c\u4f60\u89c9\u5f97 ApplyFunc \u6216 ApplyMethod \u8fd8\u9700\u8981\u5199\u4ee3\u7801 hardcode \u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u90a3\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u7528 `ApplyMethodReturn` \u8fd9\u4e2a\u6765\u89e3\u51b3\uff0cApplyMethodReturn \u63a5\u53e3\u4ece\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u5c31\u662f\u6869\u7684\u8fd4\u56de\u503c\u3002\n\n```go\nfunc TestApplyMethodReturn(t *testing.T) {\n    e := &fake.Etcd{}\n    Convey(\"TestApplyMethodReturn\", t, func() {\n        Convey(\"declares the values to be returned\", func() {\n            info := \"hello cpp\"\n            patches := ApplyMethodReturn(e, \"Retrieve\", info, nil)\n            defer patches.Reset()\n            for i := 0; i < 10; i++ {\n                output, err := e.Retrieve(\"\")\n                So(err, ShouldEqual, nil)\n                So(output, ShouldEqual, info)\n            }\n        })\n    })\n}\n```\n\u540c\u6837\u7684\u8fd8\u6709 ApplyFuncReturn, \u4ece\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5f00\u59cb\u5c31\u662f\u6869\u7684\u8fd4\u56de\u503c\u3002\n\n```go\nfunc TestApplyFuncReturn(t *testing.T) {\n    Convey(\"TestApplyFuncReturn\", t, func() {\n        Convey(\"declares the values to be returned\", func() {\n            info := \"hello cpp\"\n            patches := ApplyFuncReturn(fake.ReadLeaf, info, nil)\n            defer patches.Reset()\n            for i := 0; i < 10; i++ {\n                output, err := fake.ReadLeaf(\"\")\n                So(err, ShouldEqual, nil)\n                So(output, ShouldEqual, info)\n            }\n        })\n    })\n}\n```\n\n## \u5168\u5c40\u53d8\u91cf\u6253\u6869\n\n\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u76f4\u63a5 ApplyGlobalVar \u5c31ok\uff0c\u76f4\u63a5\u53c2\u8003\u4ee3\u7801\u5c31\u597d\u3002\n```go\nvar num = 10\n\nfunc TestApplyGlobalVar(t *testing.T) {\n  Convey(\"TestApplyGlobalVar\", t, func() {\n\n    Convey(\"change\", func() {\n      patches := ApplyGlobalVar(&num, 150)\n      defer patches.Reset()\n      assert.Equal(t, num, 150)\n    })\n\n    Convey(\"recover\", func() {\n      assert.Equal(t, num, 10)\n    })\n  })\n}\n```\n\n\n# \u539f\u7406\u6d45\u6790\n\n\u7b80\u5355\u8bf4\u4e0b\u5927\u4f53\u539f\u7406\u3002\u5728 Golang [runtime](https://github.com/golang/go/blob/e9d9d0befc634f6e9f906b5ef7476fbd7ebd25e3/src/runtime/runtime2.go#L75-L78) \u4e2d\uff0c\u51fd\u6570\u503c\u662f\u8fd9\u6837\u8868\u793a\u7684\uff1a\n\n```go\ntype funcval struct {\n\tfn uintptr\n\t// variable-size, fn-specific data here\n}\n```\n\n\u56de\u5fc6\u4e0b\u6211\u4eec\u4e4b\u524d\u63d0\u8fc7\u7684 [uintptr](https://juejin.cn/post/7127600972573966373)\uff0c\u5b83\u662f\u4e00\u4e2a\u7528\u6765\u5b58\u653e\u6307\u9488\u503c\u7684 int \u7c7b\u578b\u3002\u6240\u4ee5\u8fd9\u91cc fn \u5c31\u4fdd\u5b58\u4e86\u5185\u5b58\u4e2d\u51fd\u6570\u7684\u5730\u5740\u3002\u4e0b\u9762\u4e00\u884c\u6ce8\u91ca\u6307\u7684\u662f fn-\u4e13\u5c5e\u6570\u636e\u53ef\u53d8\u5927\u5c0f\uff0c\u8fd9\u662f\u95ed\u5305\u8fd9\u4e00\u7279\u6027\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u901a\u8fc7\u5728funcval\u4e2d\u5b58\u653e\u6355\u83b7\u7684\u53d8\u91cf\uff0c\u7531\u4e8e\u53d8\u91cf\u7684\u4e2a\u6570\u672a\u77e5\uff0c\u6240\u4ee5\u662fvarible-size\uff0c\u5177\u4f53\u5927\u5c0f\u7531\u7f16\u8bd1\u5668\u5206\u914d\u3002\n\n\n\u6211\u4eec\u7528\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6765\u6d4b\u8bd5\u4e00\u4e0b\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\n\nfunc a() int { return 1 }\n\nfunc main() {\n\tfmt.Printf(\"%p\\n\", a)\n\tfn := a\n\tfmt.Printf(\"0x%x\\n\", *(*uintptr)(unsafe.Pointer(&fn)))\n\tfmt.Printf(\"0x%x\\n\", **(**uintptr)(unsafe.Pointer(&fn)))\n}\n```\n\u6253\u5370\u7ed3\u679c\u5982\u4e0b\uff1a\n```\n0x482100\n0x4a1a50\n0x482100\n```\n\n\u6ce8\uff1a%p \u6253\u5370\u7684\u662f\u6307\u9488\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u51fd\u6570\u503cfn\u5e76\u6ca1\u6709\u76f4\u63a5\u6301\u6709\u51fd\u6570a\u7684\u5730\u5740\u3002fn\u5b9e\u9645\u4e0a\u662f*funcval\u7c7b\u578b(\u6307\u9488)\uff0c\u5b83\u9664\u4e86\u5305\u542b\u51fd\u6570a\u7684\u5730\u5740\uff0c\u8fd8\u5305\u62ec\u4e86\u989d\u5916\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u8fd9\u4e00\u5c42 funcval \u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u4e3a\u4e86\u652f\u6301\u95ed\u5305\uff08\u4e00\u4e2a\u51fd\u6570\u80fd\u591f\u6355\u83b7\u53d8\u91cf\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8131\u79bb\u5b83\u7684\u751f\u547d\u5468\u671f\u800c\u4f5c\u7528\uff09\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e0d\u5c55\u5f00\u95ed\u5305\u7684\u8bdd\u9898\uff0c\u4ece\u51fd\u6570\u503c\u7684\u7ed3\u6784\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 funcval \u62ff\u5230\u51fd\u6570\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u91cc\u7684 `fn uintptr` \u66ff\u6362\u6210\u66ff\u6362\u51fd\u6570\u7684\u673a\u5668\u7801\uff0c\u8fd9\u6837\u5c31\u80fd\u505a\u5230\uff0c\u8c03\u7528\u76ee\u6807\u51fd\u6570\u65f6\u76f4\u63a5\u6267\u884c gomonkey \u586b\u5145\u7684\u8df3\u8f6c\u6307\u4ee4\u3002\n\n\u5e95\u5c42 gomonkey \u662f\u7ed3\u5408\u4e86\u6c47\u7f16\u547d\u4ee4\uff0c\u5bf9\u5e94\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u5185\u5b58\u4fee\u6539\u7cfb\u7edf\u8c03\u7528\u6765\u505a\u5230\u7684\u3002\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u4e0b\u8fd9\u51e0\u4e2a\u6587\u4ef6\u3002\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/880fc33976934aa08d7ea1d7c7a362ee~tplv-k3u1fbpfcp-watermark.image?)\n\n-   jmp_amd64.go: \u8fd9\u91cc\u9762\u5c31\u662f\u6784\u9020\u6c47\u7f16\u6307\u4ee4\u7684\u8bed\u53e5\n-   patch.go\uff1a\u5c31\u662fgomonkey\u7684\u6838\u5fc3\u4ee3\u7801\n-   modify_binary_xxx.go\uff1a\u8fd9\u4e09\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u5185\u5b58\u4fee\u6539\u7cfb\u7edf\u8c03\u7528\uff0c\u56e0\u6b64\u4f1a\u6709\u6240\u533a\u522b\u3002\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2eeb69cf6ad14ff3896adcb5b21ad5e3~tplv-k3u1fbpfcp-watermark.image?)\n\n\u4ece\u5f00\u53d1\u8005\u7684\u89d2\u5ea6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 patch.go \u91cc\u9762\u7684\u5185\u5bb9\u5373\u53ef\u3002gomonkey \u5bf9\u5916\u63d0\u4f9b\u7684\u51fd\u6570\u90fd\u662f\u5bf9 Patch \u7684\u6210\u5458\u65b9\u6cd5\u7684\u5305\u88c5\uff1a\n\n```go\ntype Patches struct {\n\toriginals    map[uintptr][]byte              // \u539f\u51fd\u6570\n\tvalues       map[reflect.Value]reflect.Value // \u539f\u53d8\u91cf\u7684\u503c\t\n\tvalueHolders map[reflect.Value]reflect.Value\n}\n\nfunc create() *Patches {\n\treturn &Patches{originals: make(map[uintptr][]byte), values: make(map[reflect.Value]reflect.Value), valueHolders: make(map[reflect.Value]reflect.Value)}\n}\n\nfunc NewPatches() *Patches {\n\treturn create()\n}\n\nfunc (this *Patches) ApplyFunc(target, double interface{}) *Patches {\n\tt := reflect.ValueOf(target)\n\td := reflect.ValueOf(double)\n\treturn this.ApplyCore(t, d)\n}\n\n\nfunc (this *Patches) ApplyCore(target, double reflect.Value) *Patches {\n        //\u68c0\u67e5\u4e24\u8005\u662f\u5426\u90fd\u4e3afunc\uff0c\u4ee5\u53catype\u662f\u5426\u76f8\u540c\n\tthis.check(target, double)\n\tassTarget := *(*uintptr)(getPointer(target))\n\toriginal := replace(assTarget, uintptr(getPointer(double)))\n\tif _, ok := this.originals[assTarget]; !ok {\n                //\u4fdd\u5b58\u539f\u6765\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u6062\u590d\n\t\tthis.originals[assTarget] = original\n\t}\n\tthis.valueHolders[double] = double\n\treturn this\n}\n\nfunc replace(target, double uintptr) []byte {\n        //target \u6307\u5411\u51fd\u6570\u5165\u53e3\u5730\u5740\uff0cdouble\u6307\u5411\u66ff\u6362\u51fd\u6570\u7684funcVal\u7ed3\u6784\u5730\u5740\n        //\u6784\u9020\u6c47\u7f16\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230double\u6307\u5411\u7684\u51fd\u6570\u4f4d\u7f6e\n\tcode := buildJmpDirective(double)\n\n        //\u62f7\u8d1d\u539f\u51fd\u6570\u4f53,\u8fd9\u91cc\u53ea\u9700\u8981\u62f7\u8d1d\u957f\u5ea6\u4e3a\u6211\u4eec\u63d2\u5165\u6c47\u7f16\u6307\u4ee4\u957f\u5ea6\u7684\u539f\u51fd\u6570\u4f53\u5373\u53ef\n\tbytes := entryAddress(target, len(code))\n\toriginal := make([]byte, len(bytes))\n        \n        //\u4fdd\u5b58\u5230original\u4e2d\uff0c\u7b49\u5f85Reset\n\tcopy(original, bytes)\n        \n        //\u4fee\u6539\u5185\u5b58\uff0c\u63d2\u5165\u6c47\u7f16\u6307\u4ee4\n\tmodifyBinary(target, code)\n\treturn original\n}\n\nfunc (this *Patches) Reset() {\n        // \u6062\u590d\u51fd\u6570\n\tfor target, bytes := range this.originals {\n\t\tmodifyBinary(target, bytes)\n\t\tdelete(this.originals, target)\n\t}\n        // \u6062\u590d\u53d8\u91cf\n\tfor target, variable := range this.values {\n\t\ttarget.Elem().Set(variable)\n\t}\n}\n```\nApplyFunc \u5305\u542b\u4e09\u6b65\uff1a\n\n- \u751f\u6210\u8df3\u8f6c\u6c47\u7f16\u4ee3\u7801\uff1b\n- \u4fdd\u5b58\u539f\u51fd\u6570\u7684\u51fd\u6570\u4f53\uff1b\n- \u7528\u65b0\u7684\u6c47\u7f16\u4ee3\u7801\u5b8c\u6210\u66ff\u6362\n\n\u5728\u6267\u884c\u7684\u6700\u540e\u6211\u4eec Reset \u56de\u6765\uff0c\u5c31\u53ef\u4ee5\u7528 Patch \u4fdd\u5b58\u7684 originals \u548c values \u6765\u6062\u590d\uff0c\u8fd9\u91cc\u7684 Reset \u4e00\u6b21\u8c03\u7528\u5c31\u5bf9\u6240\u6709\u63d2\u6869\u8fdb\u884c\u6062\u590d\u3002\n\n\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\uff0cmap\u5e76\u4e0d\u7ebf\u7a0b\u5b89\u5168\uff0c\u5982\u679c\u5728\u5355\u6d4b\u5e76\u53d1\u6267\u884c\u65f6\uff08\u4e3a\u4e86\u52a0\u5feb\u5355\u6d4b\u6267\u884c\u901f\u5ea6\uff09\uff0c\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u7528 gomonkey \u7684\u65f6\u5019\u8981\u5c0f\u5fc3\u3002\n\n\n# \u7ed3\u8bed\n\n\u56fd\u4eba\u80fd\u5199\u51fa gomonkey \u8fd9\u6837\u5389\u5bb3\u7684\u5e93\uff0c\u4ee5\u53ca\u9002\u914d arm64 \u67b6\u6784\u8fd8\u662f\u975e\u5e38\u725b\u903c\u7684\u3002\u76ee\u524d gomonkey \u914d\u5408 goconvey \u4e00\u8d77\u6765\u5199\u5355\u6d4b\u5176\u5b9e\u662f\u5f88\u6210\u719f\u7684\u505a\u6cd5\uff0c\u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u7684\u53ea\u662f\u6700\u5e38\u7528\u7684\u573a\u666f\uff0cgomonkey \u652f\u6301\u7684\u529f\u80fd\u5168\u96c6\u53ef\u4ee5\u8bf4\u5305\u542b\u4e86\u6240\u6709\u65e5\u5e38\u80fd\u6d89\u53ca\u7684\u6253\u6869\u573a\u666f\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u8fc7\u591a\u6d89\u53ca\uff0c\u5efa\u8bae\u5927\u5bb6\u591a\u5c1d\u8bd5\u4e00\u4e0b\u4e0d\u540c\u7684\u529f\u80fd\u3002\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u7ee7\u7eed\u4e86\u89e3\u4e00\u4e0b\u4f5c\u8005\u5bf9\u65b0\u7528\u6cd5\u7684\u4ecb\u7ecd\uff1a\n\n- [\u4f60\u8be5\u5237\u65b0gomonkey\u7684\u60ef\u7528\u6cd5\u4e86](https://www.jianshu.com/p/25d49af216b7)\n- [gomonkey\u7528\u6237\u5982\u4f55\u5bf9\u6cdb\u578b\u6253\u6869](https://www.jianshu.com/p/8a52eae7f786)\n- [gomonkey\u7528\u6237\u5982\u4f55\u5bf9\u6869\u8ba1\u6570](https://www.jianshu.com/p/4f37a584c7e1)\n- [gomonkey 1.0 \u6b63\u5f0f\u53d1\u5e03\uff01](https://www.jianshu.com/p/633b55d73ddd)\n\n\n\n\u611f\u8c22\u9605\u8bfb\uff01\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u4ea4\u6d41\uff01\n",
    "mtime": "1660966588",
    "original_author": "",
    "original_type": 0,
    "rank_index": 7.90856649,
    "rtime": "1660966588",
    "status": 2,
    "tag_ids": [
      6809640408797167616,
      6809640364677267456,
      6809640427465998336
    ],
    "title": "\u89e3\u6790 Golang \u6d4b\u8bd5\uff088\uff09- gomonkey \u5b9e\u6218",
    "user_id": "325111172316839",
    "user_index": 8.505279830023289,
    "verify_status": 1,
    "view_count": 126,
    "visible_level": 0
  }