{
    "article_id": "7133493064135507976",
    "audit_status": 2,
    "brief_content": "\u643a\u624b\u521b\u4f5c\uff0c\u5171\u540c\u6210\u957f\uff01\u8fd9\u662f\u6211\u53c2\u4e0e\u300c\u6398\u91d1\u65e5\u65b0\u8ba1\u5212 \u00b7 8 \u6708\u66f4\u6587\u6311\u6218\u300d\u7684\u7b2c24\u5929\uff0c\u70b9\u51fb\u67e5\u770b\u6d3b\u52a8\u8be6\u60c5 \u80cc\u666f \u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u4e00\u822c\u6587\u4ef6\u5b58\u50a8\u5f88\u5c11\u518d\u4f7f\u7528SFTP\u670d\u52a1\uff0c\u4f46\u662f\u4e5f\u4e0d\u6392\u9664\u5408\u4f5c\u4f19\u4f34\u4f7f\u7528SFTP\u6765\u5b58\u50a8\u9879\u76ee\u4e2d\u7684\u6587",
    "category_id": "6809637769959178254",
    "collect_count": 0,
    "comment_count": 3,
    "content": "",
    "cover_image": "",
    "ctime": "1660895800",
    "digg_count": 11,
    "display_count": 0,
    "draft_id": "7133226321387192350",
    "hot_index": 20,
    "is_english": 0,
    "is_gfw": 0,
    "is_hot": 0,
    "is_markdown": 1,
    "is_original": 1,
    "link_url": "",
    "mark_content": "---\ntheme: channing-cyan\n---\n\u643a\u624b\u521b\u4f5c\uff0c\u5171\u540c\u6210\u957f\uff01\u8fd9\u662f\u6211\u53c2\u4e0e\u300c\u6398\u91d1\u65e5\u65b0\u8ba1\u5212 \u00b7 8 \u6708\u66f4\u6587\u6311\u6218\u300d\u7684\u7b2c24\u5929\uff0c[\u70b9\u51fb\u67e5\u770b\u6d3b\u52a8\u8be6\u60c5](https://juejin.cn/post/7123120819437322247 \"https://juejin.cn/post/7123120819437322247\")\n\n## \u80cc\u666f\n\n\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u4e00\u822c\u6587\u4ef6\u5b58\u50a8\u5f88\u5c11\u518d\u4f7f\u7528SFTP\u670d\u52a1\uff0c\u4f46\u662f\u4e5f\u4e0d\u6392\u9664\u5408\u4f5c\u4f19\u4f34\u4f7f\u7528SFTP\u6765\u5b58\u50a8\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\u6216\u8005\u901a\u8fc7SFTP\u6765\u5b9e\u73b0\u6587\u4ef6\u6570\u636e\u7684\u4ea4\u4e92\u3002\u6211\u9047\u5230\u7684\u9879\u76ee\u4e2d\uff0c\u5c31\u6709\u94f6\u884c\u548c\u4fdd\u9669\u516c\u53f8\u7b49\u5408\u4f5c\u4f19\u4f34\u901a\u8fc7SFTP\u670d\u52a1\u6765\u5b9e\u73b0\u4e0e\u6211\u4eec\u9879\u76ee\u7684\u6587\u4ef6\u6570\u636e\u7684\u4ea4\u4e92\u3002\n\n\u4e3a\u4e86\u80fd\u591f\u987a\u5229\u5730\u5b8c\u6210\u4e0e\u53cb\u5546\u7684SFTP\u670d\u52a1\u7684\u8fde\u901a\uff0c\u6211\u4eec\u9700\u8981\u5728\u81ea\u5df1\u7684\u9879\u76ee\u4e2d\u5b9e\u73b0\u4e00\u5957SFTP\u5ba2\u6237\u7aef\u5de5\u5177\u3002\u4e00\u822c\u6211\u4eec\u4f1a\u91c7\u7528Jsch\u6765\u5b9e\u73b0SFTP\u5ba2\u6237\u7aef\u3002\n\n## \u4f9d\u8d56\n\n```\n<!--\u6267\u884c\u8fdc\u7a0b\u64cd\u4f5c-->\n<dependency>\n \u00a0 \u00a0<groupId>com.jcraft</groupId>\n \u00a0 \u00a0<artifactId>jsch</artifactId>\n \u00a0 \u00a0<version>0.1.55</version>\n</dependency>\n \u00a0 \u00a0 <!--\u94fe\u63a5\u6c60-->\n<dependency>\n \u00a0 \u00a0<groupId>org.apache.commons</groupId>\n \u00a0 \u00a0<artifactId>commons-pool2</artifactId>\n \u00a0 \u00a0<version>2.11.1</version>\n</dependency>\n```\n\n\u9996\u5148\u6211\u4eec\u4e00\u5b9a\u8981\u5f15\u5165`jsch`\u4f9d\u8d56\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u5b9e\u73b0SFTP\u5ba2\u6237\u7aef\u7684\u57fa\u77f3\uff1b\u5176\u6b21\u6211\u4eec\u5f15\u5165\u4e86\u94fe\u63a5\u6c60\u5de5\u5177\uff0c\u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u6267\u884cSFTP\u547d\u4ee4\u90fd\u8981\u91cd\u65b0\u521b\u5efa\u94fe\u63a5\uff0c\u6211\u4eec\u4f7f\u7528\u6c60\u5316\u7684\u65b9\u5f0f\u4f18\u5316\u4e86\u6bd4\u8f83\u6d88\u8017\u8d44\u6e90\u7684\u521b\u5efa\u64cd\u4f5c\u3002\n\n## \u521b\u5efa\u5de5\u5177\u7c7b\n\n\u4e3a\u4e86\u66f4\u597d\u7684\u4f7f\u7528SFTP\u5de5\u5177\uff0c\u6211\u4eec\u628a`jsch`\u4e2d\u5173\u4e8eSFTP\u7684\u76f8\u5173\u529f\u80fd\u63d0\u70bc\u51fa\u6765\uff0c\u505a\u4e86\u4e00\u6b21\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u505a\u6210\u4e86\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u5de5\u5177\u7c7b\u3002\n\n\u91cc\u9762\u53ea\u6709\u4e24\u7c7b\u65b9\u6cd5\uff1a\n\n> 1.\u521b\u5efaSession\u4e0e\u5f00\u542fSession\uff1b\n>\n> session\u521b\u5efa\u597d\u540e\uff0c\u8fd8\u4e0d\u80fd\u521b\u5efachannel\uff0c\u9700\u8981\u5f00\u542fsession\u540e\u624d\u80fd\u521b\u5efachannel\uff1b\n>\n> 2.\u521b\u5efachannel\u4e0e\u5f00\u542fchannel\uff1b\n>\n> channel\u4e5f\u662f\u4e00\u6837\uff0c\u521b\u5efa\u597d\u7684channel\u9700\u8981\u5f00\u542f\u540e\u624d\u80fd\u771f\u6b63\u5730\u6267\u884c\u547d\u4ee4\uff1b\n\n```\npublic class JschUtil {\n  /**\n   * \u521b\u5efasession\n   *\n   * @param userName \u00a0 \u00a0 \u00a0 \u7528\u6237\u540d\n   * @param password \u00a0 \u00a0 \u00a0 \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u7aef\u53e3\n   * @param privateKeyFile \u5bc6\u94a5\u6587\u4ef6\n   * @param passphrase \u00a0 \u00a0 \u53e3\u4ee4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session createSession(String userName, String password, String host, int port, String privateKeyFile, String passphrase) throws AwesomeException {\n    return createSession(new JSch(), userName, password, host, port, privateKeyFile, passphrase);\n  }\n\u200b\n\u200b\n  /**\n   * \u521b\u5efasession\n   *\n   * @param jSch\n   * @param userName \u00a0 \u00a0 \u00a0 \u7528\u6237\u540d\n   * @param password \u00a0 \u00a0 \u00a0 \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u7aef\u53e3\n   * @param privateKeyFile \u5bc6\u94a5\n   * @param passphrase \u00a0 \u00a0 \u53e3\u4ee4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session createSession(JSch jSch, String userName, String password, String host, int port, String privateKeyFile, String passphrase) throws AwesomeException {\n    try {\n      if (!StringUtils.isEmpty(privateKeyFile)) {\n        // \u4f7f\u7528\u5bc6\u94a5\u9a8c\u8bc1\u65b9\u5f0f\uff0c\u5bc6\u94a5\u53ef\u4ee5\u662f\u6709\u53e3\u4ee4\u7684\u5bc6\u94a5\uff0c\u4e5f\u53ef\u4ee5\u662f\u6ca1\u6709\u53e3\u4ee4\u7684\u5bc6\u94a5\n        if (!StringUtils.isEmpty(passphrase)) {\n          jSch.addIdentity(privateKeyFile, passphrase);\n        } else {\n          jSch.addIdentity(privateKeyFile);\n        }\n      }\n      // \u83b7\u53d6session\n      Session session = jSch.getSession(userName, host, port);\n      if (!StringUtils.isEmpty(password)) {\n        session.setPassword(password);\n      }\n      // \u4e0d\u6821\u9a8c\u57df\u540d\n      session.setConfig(\"StrictHostKeyChecking\", \"no\");\n      return session;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"create session fail\");\n    }\n  }\n\u200b\n  /**\n   * \u521b\u5efasession\n   *\n   * @param jSch\n   * @param userName \u7528\u6237\u540d\n   * @param password \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u7aef\u53e3\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session createSession(JSch jSch, String userName, String password, String host, int port) throws AwesomeException {\n    return createSession(jSch, userName, password, host, port, StringUtils.EMPTY, StringUtils.EMPTY);\n  }\n\u200b\n\u200b\n  /**\n   * \u521b\u5efasession\n   *\n   * @param jSch\n   * @param userName \u7528\u6237\u540d\n   * @param host \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u7aef\u53e3\n   * @return\n   * @throws AwesomeException\n   */\n  private Session createSession(JSch jSch, String userName, String host, int port) throws AwesomeException {\n    return createSession(jSch, userName, StringUtils.EMPTY, host, port, StringUtils.EMPTY, StringUtils.EMPTY);\n  }\n\u200b\n\u200b\n  /**\n   * \u5f00\u542fsession\u94fe\u63a5\n   *\n   * @param jSch\n   * @param userName \u00a0 \u00a0 \u00a0 \u7528\u6237\u540d\n   * @param password \u00a0 \u00a0 \u00a0 \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u7aef\u53e3\n   * @param privateKeyFile \u5bc6\u94a5\n   * @param passphrase \u00a0 \u00a0 \u53e3\u4ee4\n   * @param timeout \u00a0 \u00a0 \u00a0  \u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session openSession(JSch jSch, String userName, String password, String host, int port, String privateKeyFile, String passphrase, int timeout) throws AwesomeException {\n    Session session = createSession(jSch, userName, password, host, port, privateKeyFile, passphrase);\n    try {\n      if (timeout >= 0) {\n        session.connect(timeout);\n      } else {\n        session.connect();\n      }\n      return session;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"session connect fail\");\n    }\n  }\n\u200b\n  /**\n   * \u5f00\u542fsession\u94fe\u63a5\n   *\n   * @param userName \u00a0 \u00a0 \u00a0 \u7528\u6237\u540d\n   * @param password \u00a0 \u00a0 \u00a0 \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u7aef\u53e3\n   * @param privateKeyFile \u5bc6\u94a5\n   * @param passphrase \u00a0 \u00a0 \u53e3\u4ee4\n   * @param timeout \u00a0 \u00a0 \u00a0  \u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session openSession(String userName, String password, String host, int port, String privateKeyFile, String passphrase, int timeout) throws AwesomeException {\n    Session session = createSession(userName, password, host, port, privateKeyFile, passphrase);\n    try {\n      if (timeout >= 0) {\n        session.connect(timeout);\n      } else {\n        session.connect();\n      }\n      return session;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"session connect fail\");\n    }\n  }\n\u200b\n  /**\n   * \u5f00\u542fsession\u94fe\u63a5\n   *\n   * @param jSch\n   * @param userName \u7528\u6237\u540d\n   * @param password \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u7aef\u53e3\n   * @param timeout  \u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session openSession(JSch jSch, String userName, String password, String host, int port, int timeout) throws AwesomeException {\n    return openSession(jSch, userName, password, host, port, StringUtils.EMPTY, StringUtils.EMPTY, timeout);\n  }\n\u200b\n  /**\n   * \u5f00\u542fsession\u94fe\u63a5\n   *\n   * @param userName \u7528\u6237\u540d\n   * @param password \u5bc6\u7801\n   * @param host \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u7aef\u53e3\n   * @param timeout  \u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session openSession(String userName, String password, String host, int port, int timeout) throws AwesomeException {\n    return openSession(userName, password, host, port, StringUtils.EMPTY, StringUtils.EMPTY, timeout);\n  }\n\u200b\n  /**\n   * \u5f00\u542fsession\u94fe\u63a5\n   *\n   * @param jSch\n   * @param userName \u7528\u6237\u540d\n   * @param host \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u7aef\u53e3\n   * @param timeout  \u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session openSession(JSch jSch, String userName, String host, int port, int timeout) throws AwesomeException {\n    return openSession(jSch, userName, StringUtils.EMPTY, host, port, StringUtils.EMPTY, StringUtils.EMPTY, timeout);\n  }\n\u200b\n  /**\n   * \u5f00\u542fsession\u94fe\u63a5\n   *\n   * @param userName \u7528\u6237\u540d\n   * @param host \u00a0 \u00a0 \u57df\u540d\n   * @param port \u00a0 \u00a0 \u7aef\u53e3\n   * @param timeout  \u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n   * @return\n   * @throws AwesomeException\n   */\n  public static Session openSession(String userName, String host, int port, int timeout) throws AwesomeException {\n    return openSession(userName, StringUtils.EMPTY, host, port, StringUtils.EMPTY, StringUtils.EMPTY, timeout);\n  }\n\u200b\n  /**\n   * \u521b\u5efa\u6307\u5b9a\u901a\u9053\n   *\n   * @param session\n   * @param channelType\n   * @return\n   * @throws AwesomeException\n   */\n  public static Channel createChannel(Session session, ChannelType channelType) throws AwesomeException {\n    try {\n      if (!session.isConnected()) {\n        session.connect();\n      }\n      return session.openChannel(channelType.getValue());\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"open channel fail\");\n    }\n  }\n\u200b\n\u200b\n  /**\n   * \u521b\u5efasftp\u901a\u9053\n   *\n   * @param session\n   * @return\n   * @throws AwesomeException\n   */\n  public static ChannelSftp createSftp(Session session) throws AwesomeException {\n    return (ChannelSftp) createChannel(session, ChannelType.SFTP);\n  }\n\u200b\n  /**\n   * \u521b\u5efashell\u901a\u9053\n   *\n   * @param session\n   * @return\n   * @throws AwesomeException\n   */\n  public static ChannelShell createShell(Session session) throws AwesomeException {\n    return (ChannelShell) createChannel(session, ChannelType.SHELL);\n  }\n\u200b\n  /**\n   * \u5f00\u542f\u901a\u9053\n   *\n   * @param session\n   * @param channelType\n   * @param timeout\n   * @return\n   * @throws AwesomeException\n   */\n  public static Channel openChannel(Session session, ChannelType channelType, int timeout) throws AwesomeException {\n    Channel channel = createChannel(session, channelType);\n    try {\n      if (timeout >= 0) {\n        channel.connect(timeout);\n      } else {\n        channel.connect();\n      }\n      return channel;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"connect channel fail\");\n    }\n  }\n\u200b\n  /**\n   * \u5f00\u542fsftp\u901a\u9053\n   *\n   * @param session\n   * @param timeout\n   * @return\n   * @throws AwesomeException\n   */\n  public static ChannelSftp openSftpChannel(Session session, int timeout) throws AwesomeException {\n    return (ChannelSftp) openChannel(session, ChannelType.SFTP, timeout);\n  }\n\u200b\n  /**\n   * \u5f00\u542fshell\u901a\u9053\n   *\n   * @param session\n   * @param timeout\n   * @return\n   * @throws AwesomeException\n   */\n  public static ChannelShell openShellChannel(Session session, int timeout) throws AwesomeException {\n    return (ChannelShell) openChannel(session, ChannelType.SHELL, timeout);\n  }\n\u200b\n\u200b\n  enum ChannelType {\n    SESSION(\"session\"),\n    SHELL(\"shell\"),\n    EXEC(\"exec\"),\n    X11(\"x11\"),\n    AGENT_FORWARDING(\"auth-agent@openssh.com\"),\n    DIRECT_TCPIP(\"direct-tcpip\"),\n    FORWARDED_TCPIP(\"forwarded-tcpip\"),\n    SFTP(\"sftp\"),\n    SUBSYSTEM(\"subsystem\");\n\u200b\n    private final String value;\n\u200b\n    ChannelType(String value) {\n      this.value = value;\n    }\n\u200b\n    public String getValue() {\n      return this.value;\n    }\n  }\n}\n```\n\n## SFTP\u94fe\u63a5\u6c60\u5316\n\n\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0`BasePooledObjectFactory`\u7c7b\u6765\u6c60\u5316\u901a\u9053`ChannelSftp`\u3002\u8fd9\u5e76\u4e0d\u662f\u771f\u6b63\u6c60\u5316\u7684\u4ee3\u7801\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u53ea\u662f\u544a\u77e5\u6c60\u5316\u7ba1\u7406\u5668\u5982\u4f55\u521b\u5efa\u5bf9\u8c61\u548c\u9500\u6bc1\u5bf9\u8c61\u3002\n\n```\nstatic class SftpFactory extends BasePooledObjectFactory<ChannelSftp> implements AutoCloseable {\n\u200b\n    private Session session;\n\u200b\n    private SftpProperties properties;\n\u200b\n \u00a0 \u00a0// \u521d\u59cb\u5316SftpFactory\n \u00a0 \u00a0// \u91cc\u9762\u4e3b\u8981\u662f\u521b\u5efa\u76ee\u6807session\uff0c\u540e\u7eed\u53ef\u7528\u901a\u8fc7\u8fd9\u4e2asession\u4e0d\u65ad\u5730\u521b\u5efaChannelSftp\u3002\n    SftpFactory(SftpProperties properties) throws AwesomeException {\n      this.properties = properties;\n      String username = properties.getUsername();\n      String password = properties.getPassword();\n      String host = properties.getHost();\n      int port = properties.getPort();\n      String privateKeyFile = properties.getPrivateKeyFile();\n      String passphrase = properties.getPassphrase();\n      session = JschUtil.createSession(username, password, host, port, privateKeyFile, passphrase);\n    }\n\u200b\n \u00a0 \u00a0// \u9500\u6bc1\u5bf9\u8c61\uff0c\u4e3b\u8981\u662f\u9500\u6bc1ChannelSftp\n    @Override\n    public void destroyObject(PooledObject<ChannelSftp> p) throws Exception {\n      p.getObject().disconnect();\n    }\n\u200b\n \u00a0 \u00a0// \u521b\u5efa\u5bf9\u8c61ChannelSftp\n    @Override\n    public ChannelSftp create() throws Exception {\n      int timeout = properties.getTimeout();\n      return JschUtil.openSftpChannel(this.session, timeout);\n    }\n\u200b\n \u00a0 \u00a0// \u5305\u88c5\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\n    @Override\n    public PooledObject<ChannelSftp> wrap(ChannelSftp channelSftp) {\n      return new DefaultPooledObject<>(channelSftp);\n    }\n\u200b\n \u00a0 \u00a0// \u9a8c\u8bc1\u5bf9\u8c61\u662f\u5426\u53ef\u7528\n    @Override\n    public boolean validateObject(PooledObject<ChannelSftp> p) {\n      return p.getObject().isConnected();\n    }\n\u200b\n \u00a0 \u00a0// \u9500\u6bc1\u8d44\u6e90\uff0c\u5173\u95edsession\n    @Override\n    public void close() throws Exception {\n      if (Objects.nonNull(session)) {\n        if (session.isConnected()) {\n          session.disconnect();\n        }\n        session = null;\n      }\n    }\n  }\n```\n\n\u4e3a\u4e86\u5b9e\u73b0\u771f\u6b63\u7684\u6c60\u5316\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n> 1.\u6211\u4eec\u9700\u8981\u5728SftpClient\u5bf9\u8c61\u4e2d\u521b\u5efa\u4e00\u4e2a`GenericObjectPool`\u5bf9\u8c61\u6c60\uff0c\u8fd9\u4e2a\u624d\u662f\u771f\u6b63\u7684\u6c60\u5b50\uff0c\u5b83\u8d1f\u8d23\u521b\u5efa\u548c\u5b58\u50a8\u6240\u6709\u7684\u5bf9\u8c61\u3002\n>\n> 2.\u6211\u4eec\u8fd8\u9700\u8981\u63d0\u4f9b\u8d44\u6e90\u9500\u6bc1\u7684\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u5b9e\u73b0`AutoCloseable`\uff0c\u5728\u670d\u52a1\u505c\u6b62\u65f6\uff0c\u9700\u8981\u628a\u76f8\u5173\u7684\u8d44\u6e90\u9500\u6bc1\u3002\n\n```\npublic class SftpClient implements AutoCloseable {\n\u200b\n  private SftpFactory sftpFactory;\n\u200b\n  GenericObjectPool<ChannelSftp> objectPool;\n\u200b\n \u00a0// \u6784\u9020\u65b9\u6cd51\n  public SftpClient(SftpProperties properties, GenericObjectPoolConfig<ChannelSftp> poolConfig) throws AwesomeException {\n    this.sftpFactory = new SftpFactory(properties);\n    objectPool = new GenericObjectPool<>(this.sftpFactory, poolConfig);\n  }\n\u200b\n \u00a0// \u6784\u9020\u65b9\u6cd52\n  public SftpClient(SftpProperties properties) throws AwesomeException {\n    this.sftpFactory = new SftpFactory(properties);\n    SftpProperties.PoolConfig config = properties.getPool();\n \u00a0 \u00a0// \u9ed8\u8ba4\u6c60\u5316\u914d\u7f6e\n    if (Objects.isNull(config)) {\n      objectPool = new GenericObjectPool<>(this.sftpFactory);\n    } else {\n \u00a0 \u00a0 \u00a0// \u81ea\u5b9a\u4e49\u6c60\u5316\u914d\u7f6e\n      GenericObjectPoolConfig<ChannelSftp> poolConfig = new GenericObjectPoolConfig<>();\n      poolConfig.setMaxIdle(config.getMaxIdle());\n      poolConfig.setMaxTotal(config.getMaxTotal());\n      poolConfig.setMinIdle(config.getMinIdle());\n      poolConfig.setTestOnBorrow(config.isTestOnBorrow());\n      poolConfig.setTestOnCreate(config.isTestOnCreate());\n      poolConfig.setTestOnReturn(config.isTestOnReturn());\n      poolConfig.setTestWhileIdle(config.isTestWhileIdle());\n      poolConfig.setBlockWhenExhausted(config.isBlockWhenExhausted());\n      poolConfig.setMaxWait(Duration.ofMillis(config.getMaxWaitMillis()));\n      poolConfig.setTimeBetweenEvictionRuns(Duration.ofMillis(config.getTimeBetweenEvictionRunsMillis()));\n      objectPool = new GenericObjectPool<>(this.sftpFactory, poolConfig);\n    }\n  }\n \u00a0\n \u00a0// \u9500\u6bc1\u8d44\u6e90\n    @Override\n  public void close() throws Exception {\n \u00a0 \u00a0// \u9500\u6bc1\u94fe\u63a5\u6c60\n    if (Objects.nonNull(this.objectPool)) {\n      if (!this.objectPool.isClosed()) {\n        this.objectPool.close();\n      }\n    }\n    this.objectPool = null;\n \u00a0 \u00a0// \u9500\u6bc1sftpFactory\n    if (Objects.nonNull(this.sftpFactory)) {\n      this.sftpFactory.close();\n    }\n  }\n}\n```\n\n## SFTP\u94fe\u63a5\u6c60\u7684\u4f7f\u7528\n\n\u6211\u4eec\u5df2\u7ecf\u5bf9\u94fe\u63a5\u6c60\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u94fe\u63a5\u6c60\u4e2d\u83b7\u53d6\u6211\u4eec\u9700\u8981\u7684`ChannelSftp`\u6765\u5b9e\u73b0\u6587\u4ef6\u7684\u4e0a\u4f20\u4e0b\u8f7d\u4e86\u3002\n\n\u4e0b\u9762\u5b9e\u73b0\u4e86\u591a\u79cd\u6587\u4ef6\u4e0a\u4f20\u548c\u4e0b\u8f7d\u7684\u65b9\u5f0f\uff1a\n\n> 1.\u76f4\u63a5\u628a\u672c\u5730\u6587\u4ef6\u4e0a\u4f20\u5230SFTP\u670d\u52a1\u5668\u7684\u6307\u5b9a\u8def\u5f84\uff1b\n>\n> 2.\u628aInputStream\u8f93\u5165\u6d41\u63d0\u4ea4\u5230SFTP\u670d\u52a1\u5668\u6307\u5b9a\u8def\u5f84\u4e2d\uff1b\n>\n> 3.\u53ef\u4ee5\u9488\u5bf9\u4ee5\u4e0a\u4e24\u79cd\u4e0a\u4f20\u65b9\u5f0f\u8fdb\u884c\u8fdb\u5ea6\u7684\u76d1\u6d4b\uff1b\n>\n> 4.\u628aSFTP\u670d\u52a1\u5668\u4e2d\u7684\u6307\u5b9a\u6587\u4ef6\u4e0b\u8f7d\u5230\u672c\u5730\u673a\u5668\u4e0a\uff1b\n>\n> 5.\u628aSFTP\u670d\u52a1\u5668\u02d9\u4e2d\u7684\u6587\u4ef6\u5199\u5165\u6307\u5b9a\u7684\u8f93\u51fa\u6d41\uff1b\n>\n> 6.\u9488\u5bf9\u4ee5\u4e0a\u4e24\u79cd\u4e0b\u8f7d\u65b9\u5f0f\uff0c\u76d1\u6d4b\u4e0b\u8f7d\u8fdb\u5ea6\uff1b\n\n```\n  /**\n   * \u4e0a\u4f20\u6587\u4ef6\n   *\n   * @param srcFilePath\n   * @param targetDir\n   * @param targetFileName\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean uploadFile(String srcFilePath, String targetDir, String targetFileName) throws AwesomeException {\n    return uploadFile(srcFilePath, targetDir, targetFileName, null);\n  }\n\u200b\n  /**\n   * \u4e0a\u4f20\u6587\u4ef6\n   *\n   * @param srcFilePath\n   * @param targetDir\n   * @param targetFileName\n   * @param monitor\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean uploadFile(String srcFilePath, String targetDir, String targetFileName, SftpProgressMonitor monitor) throws AwesomeException {\n    ChannelSftp channelSftp = null;\n    try {\n \u00a0 \u00a0 \u00a0// \u4ece\u94fe\u63a5\u6c60\u83b7\u53d6\u5bf9\u8c61\n      channelSftp = this.objectPool.borrowObject();\n      // \u5982\u679c\u4e0d\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u5939\n      if (!exist(channelSftp, targetDir)) {\n        mkdirs(channelSftp, targetDir);\n      }\n      channelSftp.cd(targetDir);\n \u00a0 \u00a0 \u00a0// \u4e0a\u4f20\u6587\u4ef6\n      if (Objects.nonNull(monitor)) {\n        channelSftp.put(srcFilePath, targetFileName, monitor);\n      } else {\n        channelSftp.put(srcFilePath, targetFileName);\n      }\n      return true;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"upload file fail\");\n    } finally {\n      if (Objects.nonNull(channelSftp)) {\n \u00a0 \u00a0 \u00a0 \u00a0// \u8fd4\u8fd8\u5bf9\u8c61\u7ed9\u94fe\u63a5\u6c60\n        this.objectPool.returnObject(channelSftp);\n      }\n    }\n  }\n\u200b\n  /**\n   * \u4e0a\u4f20\u6587\u4ef6\u5230\u76ee\u6807\u6587\u4ef6\u5939\n   *\n   * @param in\n   * @param targetDir\n   * @param targetFileName\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean uploadFile(InputStream in, String targetDir, String targetFileName) throws AwesomeException {\n    return uploadFile(in, targetDir, targetFileName, null);\n  }\n\u200b\n  /**\n   * \u4e0a\u4f20\u6587\u4ef6\uff0c\u6dfb\u52a0\u8fdb\u5ea6\u76d1\u89c6\u5668\n   *\n   * @param in\n   * @param targetDir\n   * @param targetFileName\n   * @param monitor\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean uploadFile(InputStream in, String targetDir, String targetFileName, SftpProgressMonitor monitor) throws AwesomeException {\n    ChannelSftp channelSftp = null;\n    try {\n      channelSftp = this.objectPool.borrowObject();\n      // \u5982\u679c\u4e0d\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u5939\n      if (!exist(channelSftp, targetDir)) {\n        mkdirs(channelSftp, targetDir);\n      }\n      channelSftp.cd(targetDir);\n      if (Objects.nonNull(monitor)) {\n        channelSftp.put(in, targetFileName, monitor);\n      } else {\n        channelSftp.put(in, targetFileName);\n      }\n      return true;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"upload file fail\");\n    } finally {\n      if (Objects.nonNull(channelSftp)) {\n        this.objectPool.returnObject(channelSftp);\n      }\n    }\n  }\n\u200b\n  /**\n   * \u4e0b\u8f7d\u6587\u4ef6\n   *\n   * @param remoteFile\n   * @param targetFilePath\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean downloadFile(String remoteFile, String targetFilePath) throws AwesomeException {\n    return downloadFile(remoteFile, targetFilePath, null);\n  }\n\u200b\n  /**\n   * \u4e0b\u8f7d\u76ee\u6807\u6587\u4ef6\u5230\u672c\u5730\n   *\n   * @param remoteFile\n   * @param targetFilePath\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean downloadFile(String remoteFile, String targetFilePath, SftpProgressMonitor monitor) throws AwesomeException {\n    ChannelSftp channelSftp = null;\n    try {\n      channelSftp = this.objectPool.borrowObject();\n      // \u5982\u679c\u4e0d\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u5939\n      if (!exist(channelSftp, remoteFile)) {\n        // \u4e0d\u7528\u4e0b\u8f7d\u4e86\n        return false;\n      }\n      File targetFile = new File(targetFilePath);\n      try (FileOutputStream outputStream = new FileOutputStream(targetFile)) {\n        if (Objects.nonNull(monitor)) {\n          channelSftp.get(remoteFile, outputStream, monitor);\n        } else {\n          channelSftp.get(remoteFile, outputStream);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"upload file fail\");\n    } finally {\n      if (Objects.nonNull(channelSftp)) {\n        this.objectPool.returnObject(channelSftp);\n      }\n    }\n  }\n\u200b\n  /**\n   * \u4e0b\u8f7d\u6587\u4ef6\n   *\n   * @param remoteFile\n   * @param outputStream\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean downloadFile(String remoteFile, OutputStream outputStream) throws AwesomeException {\n    return downloadFile(remoteFile, outputStream, null);\n  }\n\u200b\n  /**\n   * \u4e0b\u8f7d\u6587\u4ef6\n   *\n   * @param remoteFile\n   * @param outputStream\n   * @param monitor\n   * @return\n   * @throws AwesomeException\n   */\n  public boolean downloadFile(String remoteFile, OutputStream outputStream, SftpProgressMonitor monitor) throws AwesomeException {\n    ChannelSftp channelSftp = null;\n    try {\n      channelSftp = this.objectPool.borrowObject();\n      // \u5982\u679c\u4e0d\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u5939\n      if (!exist(channelSftp, remoteFile)) {\n        // \u4e0d\u7528\u4e0b\u8f7d\u4e86\n        return false;\n      }\n      if (Objects.nonNull(monitor)) {\n        channelSftp.get(remoteFile, outputStream, monitor);\n      } else {\n        channelSftp.get(remoteFile, outputStream);\n      }\n      return true;\n    } catch (Exception e) {\n      throw new AwesomeException(500, \"upload file fail\");\n    } finally {\n      if (Objects.nonNull(channelSftp)) {\n        this.objectPool.returnObject(channelSftp);\n      }\n    }\n  }\n\u200b\n  /**\n   * \u521b\u5efa\u6587\u4ef6\u5939\n   *\n   * @param channelSftp\n   * @param dir\n   * @return\n   */\n  protected boolean mkdirs(ChannelSftp channelSftp, String dir) {\n    try {\n      String pwd = channelSftp.pwd();\n      if (StringUtils.contains(pwd, dir)) {\n        return true;\n      }\n      String relativePath = StringUtils.substringAfter(dir, pwd);\n      String[] dirs = StringUtils.splitByWholeSeparatorPreserveAllTokens(relativePath, \"/\");\n      for (String path : dirs) {\n        if (StringUtils.isBlank(path)) {\n          continue;\n        }\n        try {\n          channelSftp.cd(path);\n        } catch (SftpException e) {\n          channelSftp.mkdir(path);\n          channelSftp.cd(path);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      return false;\n    }\n  }\n\u200b\n  /**\n   * \u5224\u65ad\u6587\u4ef6\u5939\u662f\u5426\u5b58\u5728\n   *\n   * @param channelSftp\n   * @param dir\n   * @return\n   */\n  protected boolean exist(ChannelSftp channelSftp, String dir) {\n    try {\n      channelSftp.lstat(dir);\n      return true;\n    } catch (Exception e) {\n      return false;\n    }\n  }\n```\n\n## \u96c6\u6210\u5230SpringBoot\u4e2d\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7`java config`\u7684\u65b9\u5f0f\uff0c\u628a\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u597d\u7684`SftpClient`\u7c7b\u5b9e\u4f8b\u5316\u5230`Spring IOC`\u5bb9\u5668\u4e2d\u6765\u7ba1\u7406\uff0c\u4ee5\u4fbf\u8ba9\u5f00\u53d1\u4eba\u5458\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u901a\u8fc7`@Autowired`\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\n\n-   \u914d\u7f6e\n\n    ```\n    \u200b\n    import lombok.Data;\n    import org.springframework.boot.context.properties.ConfigurationProperties;\n    import org.springframework.context.annotation.Configuration;\n    \u200b\n    /**\n     * @author zouwei\n     * @className SftpProperties\n     * @date: 2022/8/19 \u4e0b\u534812:12\n     * @description:\n     */\n    @Data\n    @Configuration\n    @ConfigurationProperties(prefix = \"sftp.config\")\n    public class SftpProperties {\n      // \u7528\u6237\u540d\n      private String username;\n      // \u5bc6\u7801\n      private String password;\n      // \u4e3b\u673a\u540d\n      private String host;\n      // \u7aef\u53e3\n      private int port;\n      // \u5bc6\u94a5\n      private String privateKeyFile;\n      // \u53e3\u4ee4\n      private String passphrase;\n      // \u901a\u9053\u94fe\u63a5\u8d85\u65f6\u65f6\u95f4\n      private int timeout;\n    \u200b\n      // \u94fe\u63a5\u6c60\u914d\u7f6e\n      private PoolConfig pool;\n    \u200b\n      @Data\n      public static class PoolConfig {\n        //\u6700\u5927\u7a7a\u95f2\u5b9e\u4f8b\u6570\uff0c\u7a7a\u95f2\u8d85\u8fc7\u6b64\u503c\u5c06\u4f1a\u88ab\u9500\u6bc1\u6dd8\u6c70\n        private int maxIdle;\n        // \u6700\u5c0f\u7a7a\u95f2\u5b9e\u4f8b\u6570\uff0c\u5bf9\u8c61\u6c60\u5c06\u81f3\u5c11\u4fdd\u75592\u4e2a\u7a7a\u95f2\u5bf9\u8c61\n        private int minIdle;\n        //\u6700\u5927\u5bf9\u8c61\u6570\u91cf\uff0c\u5305\u542b\u501f\u51fa\u53bb\u7684\u548c\u7a7a\u95f2\u7684\n        private int maxTotal;\n        //\u5bf9\u8c61\u6c60\u6ee1\u4e86\uff0c\u662f\u5426\u963b\u585e\u83b7\u53d6\uff08false\u5219\u501f\u4e0d\u5230\u76f4\u63a5\u629b\u5f02\u5e38\uff09\n        private boolean blockWhenExhausted;\n        // BlockWhenExhausted\u4e3atrue\u65f6\u751f\u6548\uff0c\u5bf9\u8c61\u6c60\u6ee1\u4e86\u963b\u585e\u83b7\u53d6\u8d85\u65f6\uff0c\u4e0d\u8bbe\u7f6e\u5219\u963b\u585e\u83b7\u53d6\u4e0d\u8d85\u65f6\uff0c\u4e5f\u53ef\u5728borrowObject\u65b9\u6cd5\u4f20\u9012\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u672c\u6b21\u7684\u8d85\u65f6\u65f6\u95f4\n        private long maxWaitMillis;\n        // \u521b\u5efa\u5bf9\u8c61\u540e\u662f\u5426\u9a8c\u8bc1\u5bf9\u8c61\uff0c\u8c03\u7528objectFactory#validateObject\n        private boolean testOnCreate;\n        // \u501f\u7528\u5bf9\u8c61\u540e\u662f\u5426\u9a8c\u8bc1\u5bf9\u8c61 validateObject\n        private boolean testOnBorrow;\n        // \u5f52\u8fd8\u5bf9\u8c61\u540e\u662f\u5426\u9a8c\u8bc1\u5bf9\u8c61 validateObject\n        private boolean testOnReturn;\n        // \u5b9a\u65f6\u68c0\u67e5\u671f\u95f4\u662f\u5426\u9a8c\u8bc1\u5bf9\u8c61 validateObject\n        private boolean testWhileIdle;\n        //\u5b9a\u65f6\u68c0\u67e5\u6dd8\u6c70\u591a\u4f59\u7684\u5bf9\u8c61, \u542f\u7528\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\n        private long timeBetweenEvictionRunsMillis;\n        //jmx\u76d1\u63a7\uff0c\u548cspringboot\u81ea\u5e26\u7684jmx\u51b2\u7a81\uff0c\u53ef\u4ee5\u9009\u62e9\u5173\u95ed\u6b64\u914d\u7f6e\u6216\u5173\u95edspringboot\u7684jmx\u914d\u7f6e\n        private boolean jmxEnabled;\n      }\n    }\n    \u200b\n    \u200b\n    ```\n\n<!---->\n\n-   java Bean\u6ce8\u5165\n\n    ```\n    import com.example.awesomespring.exception.AwesomeException;\n    import com.example.awesomespring.sftp.SftpClient;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Configuration;\n    \u200b\n    /**\n     * @author zouwei\n     * @className SftpConfig\n     * @date: 2022/8/19 \u4e0b\u534812:12\n     * @description:\n     */\n    @Configuration\n    public class SftpConfig {\n    \u200b\n      @Autowired\n      private SftpProperties properties;\n    \u200b\n     \u00a0// \u521b\u5efaSftpClient\u5bf9\u8c61\n      @Bean(destroyMethod = \"close\")\n      @ConditionalOnProperty(prefix = \"sftp.config\")\n      public SftpClient sftpClient() throws AwesomeException {\n        return new SftpClient(properties);\n      }\n    }\n    ```\n\n    \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u9879\u76ee\u7684\u4efb\u4f55\u5730\u65b9\u76f4\u63a5\u4f7f\u7528SFTP\u5ba2\u6237\u7aef\u6765\u4e0a\u4f20\u548c\u4e0b\u8f7d\u6587\u4ef6\u4e86\u3002\n",
    "mtime": "1660966016",
    "original_author": "",
    "original_type": 0,
    "rank_index": 11.94899135,
    "rtime": "1660966016",
    "status": 2,
    "tag_ids": [
      6809640408797167616,
      6809641037787561984
    ],
    "title": "\u624b\u628a\u624b\u6559\u4f60SpringBoot\u96c6\u6210SFTP\u5ba2\u6237\u7aef\u5b9e\u73b0\u6587\u4ef6\u4e0a\u4f20\u4e0b\u8f7d",
    "user_id": "4103831109771406",
    "user_index": 7.900311393078482,
    "verify_status": 1,
    "view_count": 139,
    "visible_level": 0
  }