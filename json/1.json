

{
    "article_id": "7133559411896746014",
    "audit_status": 2,
    "brief_content": "OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\u76f8\u6bd4\u4e8e\u6388\u6743\u7801\u6388\u6743\u66f4\u76f4\u63a5\uff0c\u5b83\u901a\u5e38\u7528\u4e8eCRON\u4efb\u52a1\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u540e\u7aef\u6570\u636e\u5904\u7406\u7b49\u64cd\u4f5c\u3002\u5728\u672c\u6587\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\u3002",
    "category_id": "6809637769959178254",
    "collect_count": 1,
    "comment_count": 0,
    "content": "",
    "cover_image": "",
    "ctime": "1660911302",
    "digg_count": 0,
    "display_count": 0,
    "draft_id": "7133556935504658469",
    "hot_index": 4,
    "is_english": 0,
    "is_gfw": 0,
    "is_hot": 0,
    "is_markdown": 1,
    "is_original": 1,
    "link_url": "",
    "mark_content": "\u672c\u6587\u5df2\u53c2\u4e0e\u300c\u65b0\u4eba\u521b\u4f5c\u793c\u300d\u6d3b\u52a8\uff0c\u4e00\u8d77\u5f00\u542f\u6398\u91d1\u521b\u4f5c\u4e4b\u8def\u3002\n\n## Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\n\n### \u6982\u8ff0\n\n\u5728\u6ca1\u6709\u660e\u786e\u7684\u8d44\u6e90\u62e5\u6709\u8005\uff0c\u6216\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\u8d44\u6e90\u62e5\u6709\u8005\u4e0d\u53ef\u533a\u5206\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u662f\u4e00\u79cd\u76f8\u5f53\u5e38\u89c1\u7684\u573a\u666f\u3002\u6bd4\u5982\u540e\u7aef\u7cfb\u7edf\u4e4b\u95f4\u9700\u8981\u76f4\u63a5\u901a\u4fe1\u65f6\uff0c\u5c06\u4f7f\u7528**\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743**\u3002\n\nOAuth2.0\u6587\u6863\u63cf\u8ff0\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff1a\n\n> \u5ba2\u6237\u7aef\u4f7f\u7528\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u7c7b\u578b\u6765\u83b7\u53d6\u7528\u6237\u4e0a\u4e0b\u6587\u4e4b\u5916\u7684\u8bbf\u95ee\u4ee4\u724c\u3002\u8fd9\u901a\u5e38\u88ab\u5ba2\u6237\u7aef\u7528\u6765\u8bbf\u95ee\u5173\u4e8e\u4ed6\u4eec\u81ea\u5df1\u7684\u8d44\u6e90\uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u7528\u6237\u7684\u8d44\u6e90\u3002\n\n\n\n\u5728\u672c\u6587\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff0c\u5728\u6ca1\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u5141\u8bb8\u670d\u52a1\u5b89\u5168\u7684\u76f8\u4e92\u64cd\u4f5c\u3002\n\n\n\nOAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\u76f8\u6bd4\u4e8e\u6388\u6743\u7801\u6388\u6743\u66f4\u76f4\u63a5\uff0c\u5b83\u901a\u5e38\u7528\u4e8eCRON\u4efb\u52a1\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u540e\u7aef\u6570\u636e\u5904\u7406\u7b49\u64cd\u4f5c\u3002\n\n\n\n### \u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u6d41\u7a0b\n\n\u5f53\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u8bbf\u95ee\u4ee4\u724c\u4ee5\u8bbf\u95ee\u5176\u81ea\u5df1\u7684\u8d44\u6e90\u65f6\uff0c\u5c06\u4f7f\u7528\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff0c\u800c\u4e0d\u662f\u4ee3\u8868\u7528\u6237\u3002\n\n#### \u8bf7\u6c42\u53c2\u6570\n\n##### grant_type\uff08\u5fc5\u9700\uff09\n\n\u8be5`grant_type`\u53c2\u6570\u5fc5\u987b\u8bbe\u7f6e\u4e3a`client_credentials`\u3002\n\n##### scope\uff08\u53ef\u9009\u7684\uff09\n\n\u60a8\u7684\u670d\u52a1\u53ef\u4ee5\u652f\u6301\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u7684\u4e0d\u540c\u8303\u56f4\u3002\n\n##### \u5ba2\u6237\u7aef\u8eab\u4efd\u9a8c\u8bc1\uff08\u5fc5\u9700\uff09\n\n\u5ba2\u6237\u7aef\u9700\u8981\u5bf9\u6b64\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u901a\u5e38\uff0c\u8be5\u670d\u52a1\u5c06\u5141\u8bb8\u9644\u52a0\u8bf7\u6c42\u53c2\u6570`client_id`\u548c`client_secret`\uff0c\u6216\u63a5\u53d7 HTTP Basic auth \u6807\u5934\u4e2d\u7684\u5ba2\u6237\u7aef ID \u548c\u673a\u5bc6\u3002\n\n\n![client-credentials.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/971c1fa43e614f59886b09593c133b17~tplv-k3u1fbpfcp-watermark.image?)\n\n\n\n### OAuth2\u6388\u6743\u670d\u52a1\u5668\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528[Spring Authorization Server](https://spring.io/projects/spring-authorization-server#learn)\u6784\u5efaOAuth2\u6388\u6743\u670d\u52a1\u5668\uff0c\u5177\u4f53\u8be6\u7ec6\u7ec6\u8282\u6211\u8fd9\u91cc\u5c31\u4e0d\u91cd\u590d\u8d58\u8ff0\uff0c\u53ef\u4ee5\u53c2\u8003\u6b64\u6587[JWT\u4e0eSpring Security OAuth2\u7ed3\u5408\u4f7f\u7528](https://juejin.cn/post/7131723527237861390)\u4e2d\u6388\u6743\u670d\u52a1\u5668\u642d\u5efa\uff0c\u8fd9\u91cc\u4ec5\u8bf4\u660e\u4e0e\u4e4b\u524d\u6388\u6743\u7801\u6388\u4e88\u6d41\u7a0b\u6388\u6743\u670d\u52a1\u914d\u7f6e\u7684\u4e0d\u540c\u4e4b\u5904\u3002\n\n#### \u914d\u7f6e\n\n\u5728\u6211\u4eec\u4f7f\u7528*RegisteredClient*\u6784\u5efa\u5668\u7c7b\u578b\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u5c06\u914d\u7f6e\u6b64\u5ba2\u6237\u7aef\u652f\u6301\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743\uff0c\u5e76\u7b80\u5355\u7684\u5c06\u5b83\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002\n\n```java\n@Bean\npublic RegisteredClientRepository registeredClientRepository() {\n  RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\n    .clientId(\"relive-client\")\n    .clientSecret(\"{noop}relive-client\")\n    .clientAuthenticationMethods(s -> {\n      s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);\n      s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);\n    })\n    .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n    .redirectUri(\"http://127.0.0.1:8070/login/oauth2/code/messaging-client-model\")\n    .scope(\"message.read\")\n    .clientSettings(ClientSettings.builder()\n                    .requireAuthorizationConsent(true)\n                    .requireProofKey(false)\n                    .build())\n    .tokenSettings(TokenSettings.builder()\n                   .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED) \n                   .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)\n                   .accessTokenTimeToLive(Duration.ofSeconds(30 * 60))\n                   .refreshTokenTimeToLive(Duration.ofSeconds(60 * 60))\n                   .reuseRefreshTokens(true)\n                   .build())\n    .build();\n\n  return new InMemoryRegisteredClientRepository(registeredClient);\n}\n```\n\n\u4e0a\u8ff0\u6211\u4eec\u914d\u7f6e\u4e86\u4e00\u4e2aOAuth2\u5ba2\u6237\u7aef\uff0c\u5e76\u5c06*authorizationGrantType*\u6307\u5b9a\u4e3a**client_credentials**\uff1a\n\n- **clientId**: relive-client\n- **clientSecret**: relive-client\n- **redirectUri**: [http://127.0.0.1:8070/login/oauth2/code/messaging-client-model](http://127.0.0.1:8070/login/oauth2/code/messaging-client-model)\n- **scope**: message.read\n\n\n\n### \u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u8d44\u6e90\u670d\u52a1\u5668\n\nOAuth2\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\u4e0e\u6b64\u6587[JWT\u4e0eSpring Security OAuth2\u7ed3\u5408\u4f7f\u7528](https://juejin.cn/post/7131723527237861390)\u4e2d\u8d44\u6e90\u670d\u52a1\u642d\u5efa\u4e00\u81f4\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u6b64\u6587\u4e2dOAuth2\u8d44\u6e90\u670d\u52a1\u4ecb\u7ecd\uff0c\u6216\u53ef\u4ee5\u5728\u6587\u672b\u4e2d\u83b7\u53d6\u672c\u6587\u6e90\u7801\u5730\u5740\u8fdb\u884c\u67e5\u770b\u3002\n\n#### \u914d\u7f6e\n\nOAuth2\u8d44\u6e90\u670d\u52a1\u5668\u63d0\u4f9b\u4e86\u4e00\u4e2a/*resource*/*article*\u53d7\u4fdd\u62a4\u7aef\u70b9\uff0c\u5e76\u4f7f\u7528Spring Security\u4fdd\u62a4\u6b64\u670d\u52a1\u3002\n\n```java\n@Bean\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n  http.requestMatchers()\n    .antMatchers(\"/resource/article\")\n    .and()\n    .authorizeRequests()\n    .mvcMatchers(\"/resource/article\")\n    .access(\"hasAuthority('SCOPE_message.read')\")\n    .and()\n    .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n  return http.build();\n}\n```\n\n\u8bf7\u6ce8\u610f\uff0cOAuth2\u8d44\u6e90\u670d\u52a1/*resource*/*article*\u7aef\u70b9\u8981\u6c42\u62e5\u6709\u201cmessage.read\u201d\u6743\u9650\u624d\u53ef\u4ee5\u8bbf\u95ee\uff0cSpring \u81ea\u52a8\u5728\u6240\u9700\u8303\u56f4\u540d\u79f0\u524d\u6dfb\u52a0\u201cSCOPE_\u201d\uff0c\u8fd9\u6837\u5b9e\u9645\u6240\u9700\u7684\u8303\u56f4\u662f\u201cmessage.read\u201d\u800c\u4e0d\u662f\u201cSCOPE_message.read\u201d\u3002\n\n\n\n### \u4f7f\u7528Spring Security\u6784\u5efaOAuth2\u5ba2\u6237\u7aef\n\n\u5728\u672c\u8282\u4e2d\uff0c\u60a8\u5c06\u4f7f\u7528\u5f53\u524d\u63a8\u8350\u7684WebClient\uff0cWebClient \u662f Spring \u7684 WebFlux \u5305\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u662f Spring \u7684\u53cd\u5e94\u5f0f\u3001\u975e\u963b\u585e API\uff0c\u60a8\u53ef\u4ee5\u5728[Spring\u6587\u6863](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html)\u4e2d\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\n\n\n\n\u5728\u6b64\u5ba2\u6237\u7aef\u4e2d\uff0c\u5728`@Scheduled`\u6b64\u6ce8\u89e3\u5b9a\u4e49\u7684CRON\u4efb\u52a1\u4e0b\uff0c\u60a8\u5c06\u4f7f\u7528`WebClient`\u6765\u53d1\u51fa\u8bf7\u6c42\u3002\n\n\n\n#### maven\u4f9d\u8d56\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <version>2.6.7</version>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n  <version>2.6.7</version>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\n  <version>2.6.7</version>\n</dependency>\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-webflux</artifactId>\n  <version>5.3.9</version>\n</dependency>\n<dependency>\n  <groupId>io.projectreactor.netty</groupId>\n  <artifactId>reactor-netty</artifactId>\n  <version>1.0.9</version>\n</dependency>\n```\n\n#### \u914d\u7f6e\n\n\u6388\u6743\u6211\u4eec\u5c06\u5728application.yml\u4e2d\u914d\u7f6eOAuth2\u6388\u6743\u4fe1\u606f\uff0c\u5e76\u6307\u5b9aOAuth2\u5ba2\u6237\u7aef\u670d\u52a1\u7aef\u53e3\u53f7\uff1a\n\n```yaml\nserver:\n  port: 8070\n\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          messaging-client-model:\n            provider: client-provider\n            client-id: relive-client\n            client-secret: relive-client\n            authorization-grant-type: client_credentials\n            client-authentication-method: client_secret_post\n            scope: message.read\n            client-name: messaging-client-model\n        provider:\n          client-provider:\n            token-uri: http://127.0.0.1:8080/oauth2/token\n```\n\n<br>\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a*SecurityConfig*\u7c7b\u7528\u6765\u914d\u7f6eSpring Security OAuth2\u5ba2\u6237\u7aef\u6240\u9700Bean\uff1a\n\n```java\n@Bean\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n  http\n    .authorizeRequests(authorizeRequests ->\n                       authorizeRequests.anyRequest().permitAll()\n                      )\n    .oauth2Client(withDefaults());\n  return http.build();\n}\n\n@Bean\nWebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n  ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client = new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n  return WebClient.builder()\n    .filter(oauth2Client)\n    .build();\n}\n\n@Bean\nOAuth2AuthorizedClientManager authorizedClientManager(ClientRegistrationRepository clientRegistrationRepository,\n                                                      OAuth2AuthorizedClientService authorizedClientService) {\n\n  OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder\n    .builder()\n    .clientCredentials()\n    .build();\n  AuthorizedClientServiceOAuth2AuthorizedClientManager authorizedClientManager = new AuthorizedClientServiceOAuth2AuthorizedClientManager(clientRegistrationRepository, authorizedClientService);\n  authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n\n  return authorizedClientManager;\n}\n```\n\n\u6211\u4eec\u521b\u5efa\u4e00\u4e2aWebClient\u5b9e\u4f8b\u7528\u4e8e\u5411\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884cHTTP\u8bf7\u6c42\uff0c\u5e76\u7ed9WebClient\u6dfb\u52a0\u4e86\u4e00\u4e2aOAuth2\u6388\u6743\u8fc7\u6ee4\u5668\u3002`AuthorizedClientServiceOAuth2AuthorizedClientManager`\u8fd9\u662f\u534f\u8c03OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u4e88\u8bf7\u6c42\u7684\u9ad8\u7ea7\u63a7\u5236\u5668\u7c7b\uff0c\u8fd9\u91cc\u6211\u5c06\u6307\u51fa`AuthorizedClientServiceOAuth2AuthorizedClientManager`\u662f\u4e00\u4e2a\u4e13\u95e8\u8bbe\u8ba1\u7528\u4e8e\u5728 HttpServletRequest \u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u4f7f\u7528\u7684\u7c7b\u3002\n\n\u6765\u81ea[Spring \u6587\u6863](https://docs.spring.io/spring-security/site/docs/5.4.5/reference/html5/#oauth2Client-authorized-manager-provider)\uff1a\n\n> DefaultOAuth2AuthorizedClientManager \u65e8\u5728\u7528\u4e8e HttpServletRequest \u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u5728 HttpServletRequest \u4e0a\u4e0b\u6587\u4e4b\u5916\u64cd\u4f5c\u65f6\uff0c\u8bf7\u6539\u7528 AuthorizedClientServiceOAuth2AuthorizedClientManager\u3002\n\n\n\n<br>\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u521b\u5efa\u4f7f\u7528`@Scheduled`\u6ce8\u89e3\u5b9a\u4e49\u7684\u4efb\u52a1\uff0c\u5e76\u6ce8\u5165WebClient\u8c03\u7528\u8d44\u6e90\u670d\u52a1\u8bf7\u6c42\uff1a\n\n```java\n@Service\npublic class ArticleJob {\n\n  @Autowired\n  private WebClient webClient;\n\n  @Scheduled(cron = \"0/2 * * * * ? \")\n  public void exchange() {\n    List list = this.webClient\n      .get()\n      .uri(\"http://127.0.0.1:8090/resource/article\")\n      .attributes(clientRegistrationId(\"messaging-client-model\"))\n      .retrieve()\n      .bodyToMono(List.class)\n      .block();\n    log.info(\"\u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a\" + list);\n  }\n}\n\n```\n\n\u8fd9\u4e2a\u7c7b\u4e2d`exchange()`\u65b9\u6cd5\u4f7f\u7528`@Scheduled`\u6ce8\u89e3\u6bcf2\u79d2\u89e6\u53d1\u4e00\u6b21\u8bf7\u6c42\uff0c\u5728\u6211\u4eec\u542f\u52a8\u6240\u6709\u670d\u52a1\u540e\uff0c\u4f60\u5e94\u8be5\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a\n\n```\n2022-07-09 19:55:22.281  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\n2022-07-09 19:55:24.023  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\n2022-07-09 19:55:26.015  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\n2022-07-09 19:55:28.009  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : \u8c03\u7528\u8d44\u6e90\u670d\u52a1\u5668\u6267\u884c\u7ed3\u679c\uff1a[article1, article2, article3]\n```\n\n\n\n### \u7ed3\u8bba\n\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u672c\u6587\u4e2d\u4f7f\u7528\u7684\u6e90\u4ee3\u7801\u53ef[\u5728 GitHub \u4e0a](https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-client-model)\u83b7\u5f97\u3002\n\n",
    "mtime": "1660966943",
    "original_author": "",
    "original_type": 0,
    "rank_index": 5.57022405,
    "rtime": "1660966943",
    "status": 2,
    "tag_ids": [
      6809641037787561984,
      6809640445233070080
    ],
    "title": "Spring Security OAuth2\u5ba2\u6237\u7aef\u51ed\u636e\u6388\u6743",
    "user_id": "4051073081555869",
    "user_index": 6.786121069406377,
    "verify_status": 1,
    "view_count": 100,
    "visible_level": 0
  }

