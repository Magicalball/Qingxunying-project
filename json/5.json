{
    "article_id": "7133522794641358884",
    "audit_status": 2,
    "brief_content": "SPI\u5168\u79f0Service Provider Interface\uff0c\u662fJava\u63d0\u4f9b\u7684\u4e00\u5957\u7528\u6765\u88ab\u7b2c\u4e09\u65b9\u5b9e\u73b0\u6216\u8005\u6269\u5c55\u7684\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u542f\u7528\u6846\u67b6\u6269\u5c55\u548c\u66ff\u6362\u7ec4\u4ef6\u3002 \u6211\u4eec\u7cfb\u7edf\u91cc\u62bd\u8c61\u7684\u5404\u4e2a\u6a21\u5757\uff0c\u5f80\u5f80\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5b9e\u73b0.",
    "category_id": "6809637769959178254",
    "collect_count": 0,
    "comment_count": 0,
    "content": "",
    "cover_image": "https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf31629882714e86a8e31341b33f9592~tplv-k3u1fbpfcp-watermark.image?",
    "ctime": "1660902728",
    "digg_count": 0,
    "display_count": 0,
    "draft_id": "7133520074761043998",
    "hot_index": 4,
    "is_english": 0,
    "is_gfw": 0,
    "is_hot": 0,
    "is_markdown": 1,
    "is_original": 1,
    "link_url": "",
    "mark_content": "## \u7b80\u4ecb\n\nSPI\u5168\u79f0Service Provider Interface\uff0c\u662fJava\u63d0\u4f9b\u7684\u4e00\u5957\u7528\u6765\u88ab\u7b2c\u4e09\u65b9\u5b9e\u73b0\u6216\u8005\u6269\u5c55\u7684\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u542f\u7528\u6846\u67b6\u6269\u5c55\u548c\u66ff\u6362\u7ec4\u4ef6\u3002\n\n\u6211\u4eec\u7cfb\u7edf\u91cc\u62bd\u8c61\u7684\u5404\u4e2a\u6a21\u5757\uff0c\u5f80\u5f80\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u6848\uff0c\u6bd4\u5982\u65e5\u5fd7\u6a21\u5757\u3001xml\u89e3\u6790\u6a21\u5757\u3001jdbc\u6a21\u5757\u7b49\u65b9\u6848\u3002\u9762\u5411\u7684\u5bf9\u8c61\u7684\u8bbe\u8ba1\u91cc\uff0c\u6211\u4eec\u4e00\u822c\u63a8\u8350\u6a21\u5757\u4e4b\u95f4\u57fa\u4e8e\u63a5\u53e3\u7f16\u7a0b\uff0c\u6a21\u5757\u4e4b\u95f4\u4e0d\u5bf9\u5b9e\u73b0\u7c7b\u8fdb\u884c\u786c\u7f16\u7801\u3002\u4e00\u65e6\u4ee3\u7801\u91cc\u6d89\u53ca\u5177\u4f53\u7684\u5b9e\u73b0\u7c7b\uff0c\u5c31\u8fdd\u53cd\u4e86\u53ef\u62d4\u63d2\u7684\u539f\u5219\uff0c\u5982\u679c\u9700\u8981\u66ff\u6362\u4e00\u79cd\u5b9e\u73b0\uff0c\u5c31\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002\u4e3a\u4e86\u5b9e\u73b0\u5728\u6a21\u5757\u88c5\u914d\u7684\u65f6\u5019\u80fd\u4e0d\u5728\u7a0b\u5e8f\u91cc\u52a8\u6001\u6307\u660e\uff0c\u8fd9\u5c31\u9700\u8981\u4e00\u79cd\u670d\u52a1\u53d1\u73b0\u673a\u5236\u3002 Java SPI\u5c31\u662f\u63d0\u4f9b\u8fd9\u6837\u7684\u4e00\u4e2a\u673a\u5236\uff1a\u4e3a\u67d0\u4e2a\u63a5\u53e3\u5bfb\u627e\u670d\u52a1\u5b9e\u73b0\u7684\u673a\u5236\u3002\u6709\u70b9\u7c7b\u4f3cIOC\u7684\u601d\u60f3\uff0c\u5c31\u662f\u5c06\u88c5\u914d\u7684\u63a7\u5236\u6743\u79fb\u5230\u7a0b\u5e8f\u4e4b\u5916\uff0c\u5728\u6a21\u5757\u5316\u8bbe\u8ba1\u4e2d\u8fd9\u4e2a\u673a\u5236\u5c24\u5176\u91cd\u8981\u3002\n\n## Java\u7684SPI\u673a\u5236: ServiceLoader\n\n### \u7528\u6cd5\n\n```\n// java.sql.Driver\n// 1.new\u4e00\u4e2aServiceLoader\nServiceLoader<Driver> drivers = ServiceLoader.load(Driver.class);\nIterator<Driver> iterator = drivers.iterator();\n// 2.\u8c03\u7528\u5ef6\u8fdf\u52a0\u8f7d\u5668\u7684hashNext\nwhile (iterator.hasNext()) {\n \u00a0// 3.\u8c03\u7528\u5ef6\u8fdf\u52a0\u8f7d\u5668\u7684next\n \u00a0Driver next = iterator.next();\n \u00a0System.out.println(next.getClass());\n}\n\u200b\n// result:\nclass com.mysql.jdbc.Driver\nclass com.mysql.fabric.jdbc.FabricMySQLDriver\nclass com.alibaba.druid.proxy.DruidDriver\nclass com.alibaba.druid.mock.MockDriver\n```\n\n### \u539f\u7406\n\nServiceLoader\u5e76\u4e0d\u4f1a\u5728load\u7684\u65f6\u5019\u53bb\u52a0\u8f7d\u6240\u6709 \u63a5\u53e3\u5bf9\u5e94\u5b9e\u73b0\u7c7b\u7684\u6587\u4ef6\u3002\u800c\u662f\u5728\u6267\u884c\u63a5\u53e3\u7684\u65f6\u5019\u53bb\u904d\u5386\u52a0\u8f7d\u3002\n\n### ServiceLoader\u7684\u6838\u5fc3\u5c5e\u6027\n\n```\n// \u63a5\u53e3\u5168\u9650\u5b9a\u540d\u7684\u6587\u4ef6\u7684\u8def\u5f84\u524d\u7f00\nprivate static final String PREFIX = \"META-INF/services/\";\n\u200b\n// \u88ab\u52a0\u8f7d\u7684\u63a5\u53e3\nprivate final Class<S> service;\n\u200b\n// \u7c7b\u7684\u52a0\u8f7d\u5668\nprivate final ClassLoader loader;\n\u200b\n// \u521b\u5efaserviceLoader\u65f6 \u8bbf\u95ee\u63a7\u5236\u4e0a\u4e0b\u6587\nprivate final AccessControlContext acc;\n\u200b\n// \u670d\u52a1\u7f13\u5b58\u6c60\uff08k-> \u7c7b\u5168\u62a5\u540d  v-> \u5b9e\u73b0\u7c7b\u4fe1\u606f\uff09\nprivate LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n\u200b\n// \u5ef6\u8fdf\u52a0\u8f7d\u7684\u8fed\u4ee3\u5668\nprivate LazyIterator lookupIterator;\n```\n\n### LazyIterator\u7684\u6838\u5fc3\u5c5e\u6027\n\n```\n// \u63a5\u53e3\u7c7b\u578b\nClass<S> service;\n// \u63a5\u7684\u52a0\u8f7d\u5668\nClassLoader loader;\n// META-INF/services/\u5185\u914d\u7f6e\u6587\u4ef6\u7684URL\u96c6\u5408\nEnumeration<URL> configs = null;\n// \u9700\u52a0\u8f7d\u7684\u5b9e\u73b0\u7c7b\u7684\u5168\u5305\u540d\u96c6\u5408\nIterator<String> pending = null;\n// \u4e0b\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u7684\u5168\u62a5\u540d\uff0c\u7528\u4e8e\u8fed\u4ee3\u5668\u5ef6\u8fdf\u52a0\u8f7d\u7684\u4e0b\u4e00\u4e2a\u7c7b\nString nextName = null;\n```\n\n### \u6e90\u7801\u89e3\u6790\n\n1\u3001load\u65b9\u6cd5\n\n```\n// 1\u3001load\u65b9\u6cd5\npublic static <S> ServiceLoader<S> load(Class<S> service) {\n \u00a0// \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684\u7c7b\u52a0\u8f7d\u5668\n \u00a0ClassLoader cl = Thread.currentThread().getContextClassLoader();\n \u00a0// \u7ee7\u7eed\u8c03\u7528\u91cd\u8f7d\u7684\u65b9\u6cd5\n \u00a0return ServiceLoader.load(service, cl);\n}\n\u200b\n// 2\u3001\u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\npublic static <S> ServiceLoader<S> load(Class<S> service, ClassLoader loader) {\n \u00a0// new \u4e00\u4e2aServiceLoader\u5bf9\u8c61\n \u00a0return new ServiceLoader<>(service, loader);\n}\n\u200b\n// 3\u3001new \u4e00\u4e2aserviceLoader\u5bf9\u8c61\nprivate ServiceLoader(Class<S> svc, ClassLoader cl) {\n \u00a0// PS\uff1a\u670d\u52a1\u63a5\u53e3\u4e0d\u80fd\u4e3a\u7a7a\n \u00a0service = Objects.requireNonNull(svc, \"Service interface cannot be null\");\n \u00a0// \u6307\u5b9a\u52a0\u8f7d\u5668\n \u00a0loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n \u00a0// \u6307\u5b9a\u4e0b\u4e0a\u5bb9\u5668\uff08\u9ed8\u8ba4\u4e3anull\uff09\n \u00a0acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n \u00a0// \u5237\u65b0\uff1a1.\u91cd\u7f6e\u670d\u52a1\u7f13\u51b2\u6c60 2.new\u4e00\u4e2a\u5ef6\u8fdf\u52a0\u8f7d\u7684\u8fed\u4ee3\u5668\n \u00a0reload();\n}\n\u200b\n// 4\u3001\u5237\u65b0 \u00a0\npublic void reload() {\n \u00a0// \u91cd\u7f6e\u670d\u52a1\u7f13\u5b58\u6c60\n \u00a0providers.clear();\n \u00a0// \u6784\u9020\u4e00\u4e2a\u5ef6\u8fdf\u52a0\u8f7d\u7684\u8fed\u4ee3\u5668\n \u00a0lookupIterator = new LazyIterator(service, loader);\n}\n\u200b\n// 5\u3001new LazyIterator\nprivate LazyIterator(Class<S> service, ClassLoader loader) {\n \u00a0// \u6307\u5b9a\u63a5\u53e3\u7684\u7c7b\u4fe1\u606f\n \u00a0this.service = service;\n \u00a0// \u6307\u5b9a\u7c7b\u52a0\u8f7d\u5668\n \u00a0this.loader = loader;\n}\n```\n\n2\u3001\u83b7\u53d6\u5ef6\u8fdf\u52a0\u8f7d\u7684\u8fed\u4ee3\u5668\n\n3\u3001\u8c03\u7528\u5ef6\u8fdf\u52a0\u8f7d\u8fed\u4ee3\u5668\u7684hasNext()\u65b9\u6cd5\n\n```\n// 1\u3001\u8c03\u7528hasNext()\u65b9\u6cd5\npublic boolean hasNext() {\n  // \u9ed8\u8ba4 acc\u4e3anull\n \u00a0if (acc == null) {\n \u00a0 \u00a0// \u6267\u884chasNextService()\u65b9\u6cd5\n \u00a0 \u00a0return hasNextService();\n  } else {\n \u00a0 \u00a0PrivilegedAction<Boolean> action = new PrivilegedAction<Boolean>() {\n \u00a0 \u00a0 \u00a0public Boolean run() { return hasNextService(); }\n \u00a0  };\n \u00a0 \u00a0return AccessController.doPrivileged(action, acc);\n  }\n}\n\u200b\n// 2\u3001\u8c03\u7528hasNextService()\u65b9\u6cd5\nprivate boolean hasNextService() {\n \u00a0// \u9ed8\u8ba4\u7b2c\u4e00\u6b21\u6267\u884c nextName\u4e3anull\n \u00a0if (nextName != null) {\n \u00a0 \u00a0return true;\n  }\n \u00a0// \u9ed8\u8ba4\u7b2c\u4e00\u6b21\u6267\u884c configs\u4e3anull, \u901a\u8fc7\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u7c7b\u7684\u5168\u62a5\u540d\uff0c\u7136\u540e\u83b7\u53d6URL\u3002\n \u00a0if (configs == null) {\n \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0// \"META-INF/services/\" + java.sql.Driver\n \u00a0 \u00a0 \u00a0// 1.file:/Users/zhouzeng/.m2/repository/mysql/mysql-connector-java/5.1.38/mysql-connector-java-5.1.38.jar!/META-INF/services/java.sql.Driver\n \u00a0 \u00a0 \u00a0// 2.file:/Users/zhouzeng/.m2/repository/com/alibaba/druid/1.0.28/druid-1.0.28.jar!/META-INF/services/java.sql.Driver\n \u00a0 \u00a0 \u00a0String fullName = PREFIX + service.getName();\n \u00a0 \u00a0 \u00a0if (loader == null) {\n \u00a0 \u00a0 \u00a0 \u00a0configs = ClassLoader.getSystemResources(fullName);\n \u00a0 \u00a0  } else {\n \u00a0 \u00a0 \u00a0 \u00a0configs = loader.getResources(fullName);\n \u00a0 \u00a0  }\n \u00a0  } catch (IOException x) {\n \u00a0 \u00a0 \u00a0fail(service, \"Error locating configuration files\", x);\n \u00a0  }\n  }\n \u00a0// \u9ed8\u8ba4\u7b2c\u4e00\u6b21\u6267\u884c pending\u4e3anull\n \u00a0while ((pending == null) || !pending.hasNext()) {\n \u00a0 \u00a0if (!configs.hasMoreElements()) {\n \u00a0 \u00a0 \u00a0return false;\n \u00a0  }\n \u00a0 \u00a0// \u6839\u636e \u63a5\u53e3+ URL \u89e3\u6790 \n \u00a0 \u00a0/**\n \u00a0 \u00a0 * 1.0 = \"com.mysql.jdbc.Driver\" 1 = \"com.mysql.fabric.jdbc.FabricMySQLDriver\"\n \u00a0 \u00a0 * 2.0 = \"com.alibaba.druid.proxy.DruidDriver\" 1 = \"com.alibaba.druid.mock.MockDriver\"\n \u00a0 \u00a0 **/\n \u00a0 \u00a0pending = parse(service, configs.nextElement());\n  }\n \u00a0// com.mysql.jdbc.Driver\n \u00a0nextName = pending.next();\n \u00a0return true;\n}\n\u200b\n```\n\n4\u3001next()\u65b9\u6cd5\n\n```\n// 1.\u6267\u884cnext\u65b9\u6cd5\npublic S next() {\n \u00a0// \u9ed8\u8ba4 acc\u4e3anull\n \u00a0if (acc == null) {\n \u00a0 \u00a0// \u8c03\u7528nexrService()\u65b9\u6cd5\n \u00a0 \u00a0return nextService();\n  } else {\n \u00a0 \u00a0PrivilegedAction<S> action = new PrivilegedAction<S>() {\n \u00a0 \u00a0 \u00a0public S run() { return nextService(); }\n \u00a0  };\n \u00a0 \u00a0return AccessController.doPrivileged(action, acc);\n  }\n}\n\u200b\n// 2.\u6267\u884cnextService()\u65b9\u6cd5\nprivate S nextService() {\n \u00a0// \u5224\u65ad\u662f\u5426\u8fd8\u6709\u4e0b\u4e00\u4e2a\u7c7b\u9700\u8981\u52a0\u8f7d\n \u00a0if (!hasNextService()) {\n \u00a0 \u00a0throw new NoSuchElementException(); \u00a0\n  }\n \u00a0// 1.com.mysql.jdbc.Driver\n \u00a0// 2.com.mysql.fabric.jdbc.FabricMySQLDriver\n \u00a0// 3.com.alibaba.druid.proxy.DruidDriver\n \u00a0// 4.com.alibaba.druid.mock.MockDriver\n \u00a0String cn = nextName;\n \u00a0nextName = null;\n \u00a0Class<?> c = null;\n \u00a0try {\n \u00a0 \u00a0// \u751f\u6210\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\n \u00a0 \u00a0c = Class.forName(cn, false, loader);\n  } catch (ClassNotFoundException x) {\n \u00a0 \u00a0fail(service, \"Provider \" + cn + \" not found\");\n  }\n \u00a0// \u6821\u9a8c\u5b9e\u73b0\u7c7b \u662f\u4e0d\u662f\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\n \u00a0if (!service.isAssignableFrom(c)) {\n \u00a0 \u00a0fail(service, \u00a0\"Provider \" + cn \u00a0+ \" not a subtype\");\n  }\n \u00a0try {\n \u00a0 \u00a0// \u5c06\u5b9e\u73b0\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8f6c\u5316\u4e3a\u63a5\u53e3\u7c7b\u578b\uff08\u7c7b\u578b\u8f6c\u5316\uff09\n \u00a0 \u00a0S p = service.cast(c.newInstance());\n \u00a0 \u00a0// \u653e\u5230\u7f13\u5b58\u6c60\u4e2d\n \u00a0 \u00a0providers.put(cn, p);\n \u00a0 \u00a0return p;\n  } catch (Throwable x) {\n \u00a0 \u00a0fail(service, \"Provider \" + cn + \" could not be instantiated\", x);\n  }\n \u00a0throw new Error();\n}\n```\n\n## \u4f18\u7f3a\u70b9\n\n\u4f18\u70b9\uff1a\u5c06\u4e1a\u52a1\u4ee3\u7801\u548c\u5177\u4f53\u5b9e\u73b0\u7c7b\u89e3\u8026\uff0c\u65b9\u4fbf\u6269\u5c55\u3002\u5982\u9700\u589e\u52a0\u65b0\u903b\u8f91\uff0c\u65e0\u9700\u4fee\u6539\u4e3b\u6d41\u7a0b\uff0c\u76f4\u63a5\u5728PI\u914d\u7f6e\u6587\u4ef6\u589e\u52a0\u5b9e\u73b0\u7c7b\u7684\u5168\u9650\u5b9a\u540d\u5373\u53ef\u3002\n\n\u7f3a\u70b9\uff1a\u9897\u7c92\u5ea6\u4e0d\u591f\u7ec6\uff0c\u65e0\u6cd5\u51c6\u786e\u5b9a\u4f4d\u67d0\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u3002\u8981\u6267\u884c\u5c31\u6267\u884c\u6240\u6709\u7684\u5b9e\u73b0\u7c7b\u3002\n\n## SpringBoot \u4e4bSPI\u673a\u5236\uff1aSpringFactoriesLoader\n\n### \u5e94\u7528\n\n1.\u521b\u5efa\u4e00\u4e2aenableConfiguration\n\n```\n@Configuration\n@EnableConfigurationProperties({MybatisProperties.class})\npublic class MybatisAutoConfiguration {\n \u00a0 \u00a0\n}\n```\n\n2.\u5728resources\u4e0b\u5b9a\u4e49META-INF/spring.factories\n\n```\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration\n```\n\n3.\u7528SpringBoot\u542f\u52a8\n\n```\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    } \n}\n```\n\n\u5728springbot\u542f\u52a8\u65f6\u56de\u53bb\u52a0\u8f7dMybatisAutoConfiguration\u8fd9\u4e2a\u7c7b\u3002\n\n### \u539f\u7406\n\n1\u3001\u5728SpringBoot\u542f\u52a8\u65f6\uff0c\u5728refreshContext()\u65f6\uff0c\u56de\u53bb\u8c03\u7528@Import\u7684selector\u3002\n\n2\u3001\u7136\u540e\u6267\u884c AutoConfigurationImportSelector\u7684process()\u65b9\u6cd5 \u83b7\u53d6\u5bf9\u5e94\u7684configuration\u7684List\u3002\n\n3\u3001\u7531Spring \u53bb\u52a0\u8f7d\u5b9e\u4f8b\u5316configuration\u7684\u914d\u7f6e\u7c7b\u3002\n\n```\n// 1.SpringBootApplication\u4e2d\u7684SpringBootConfiguration\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n\t\t@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication {\n\n\t@AliasFor(annotation = EnableAutoConfiguration.class)\n\tClass<?>[] exclude() default {};\n\n\t@AliasFor(annotation = EnableAutoConfiguration.class)\n\tString[] excludeName() default {};\n\n\t@AliasFor(annotation = ComponentScan.class, attribute = \"basePackages\")\n\tString[] scanBasePackages() default {};\n\n\n\t@AliasFor(annotation = ComponentScan.class, attribute = \"basePackageClasses\")\n\tClass<?>[] scanBasePackageClasses() default {};\n\n}\n\n// 2.SpringBootConfiguration\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n\n\tString ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n\tClass<?>[] exclude() default {};\n\n\tString[] excludeName() default {};\n}\n\n// 3.\u67e5\u770b AutoConfigurationImportSelector\u7684selectImports()\u65b9\u6cd5\npublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n  if (!this.isEnabled(annotationMetadata)) {\n    return NO_IMPORTS;\n  } else {\n    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n    AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n    // \u83b7\u53d6enableautoconfiguration\u76f8\u5173\u7684\u7c7b\n    List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n    configurations = this.removeDuplicates(configurations);\n    Set<String> exclusions = this.getExclusions(annotationMetadata, attributes);\n    this.checkExcludedClasses(configurations, exclusions);\n    configurations.removeAll(exclusions);\n    configurations = this.filter(configurations, autoConfigurationMetadata);\n    this.fireAutoConfigurationImportEvents(configurations, exclusions);\n    return StringUtils.toStringArray(configurations);\n  }\n}\n// 4. \u6267\u884cgetCandidateConfigurations()\u65b9\u6cd5\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata, \n                                                  AnnotationAttributes attributes) {\n  // \u83b7\u53d6configurations\n  List<String> configurations = SpringFactoriesLoader.loadFactoryNames(\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());\n  Assert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\");\n  return configurations;\n}\n\n// 5. \u6267\u884cloadFactoryNames()\u65b9\u6cd5\npublic static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {\n  // org.springframework.boot.autoconfigure.EnableAutoConfiguration\n  String factoryClassName = factoryClass.getName();\n  // \u52a0\u8f7dspring.fatories\u7684\u914d\u7f6e\u9879\uff0c\u7136\u540e\u83b7\u53d6key\u4e3aEnableAutoConfiguration\u7684value\n  return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());\n}\n```\n\n### SpringFactoriesLoader\u7684\u6838\u5fc3\u5c5e\u6027\n\n```\n// 1.spring \u8d44\u6e90\u52a0\u8f7d\u7684\u9ed8\u8ba4\u8def\u5f84\npublic static final String FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\";\n\n// 2.\u7f13\u5b58\u6c60 K\u4e3a\u7c7b\u52a0\u8f7d\u5668 HK\u4e3a\u63a5\u53e3\u5168\u5305\u540d HV\u4e3a\u5b9e\u73b0\u7c7b\nprivate static final Map<ClassLoader, MultiValueMap<String, String>> cache = new ConcurrentReferenceHashMap<>();\n```\n\n```\n// 6.\u6267\u884cloadSpringFactories()\u65b9\u6cd5\uff0c\u6839\u636e\u7c7b\u52a0\u8f7d\u5668\uff0c\u83b7\u53d6META-INF/spring.factories\u4e0b\u7684\u914d\u7f6e\nprivate static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n  // \u5728\u7f13\u5b58\u6c60\u4e2d\u83b7\u53d6\uff0c\u6709\u5219\u76f4\u63a5\u8fd4\u56de\u3002\n  MultiValueMap<String, String> result = cache.get(classLoader);\n  if (result != null) {\n    return result;\n  }\n\n  try {\n    // \u83b7\u53d6\"META-INF/spring.factories\"\u7684URL\n    Enumeration<URL> urls = (classLoader != null ?\n                             classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n                             ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n    result = new LinkedMultiValueMap<>();\n    while (urls.hasMoreElements()) {\n      URL url = urls.nextElement();\n      UrlResource resource = new UrlResource(url);\n      Properties properties = PropertiesLoaderUtils.loadProperties(resource);\n      for (Map.Entry<?, ?> entry : properties.entrySet()) {\n        List<String> factoryClassNames = Arrays.asList(\n          StringUtils.commaDelimitedListToStringArray((String) entry.getValue()));\n        result.addAll((String) entry.getKey(), factoryClassNames);\n      }\n    }\n    // \u5c06\u89e3\u6790\u51fa\u6765\u7684\u6570\u636e\u653e\u5230\u7f13\u5b58\u6c60\u4e2d\u3002\n    cache.put(classLoader, result);\n    return result;\n  }\n  catch (IOException ex) {\n    throw new IllegalArgumentException(\"Unable to load factories from location [\" +\n                                       FACTORIES_RESOURCE_LOCATION + \"]\", ex);\n  }\n}\n```\n\n## Dubbo\u7684SPI\u673a\u5236\n\n### \u7528\u6cd5\n\n#### \u4ee3\u7801\n\n```\n// 1.\u5b9a\u4e49\u63a5\u53e3\n@SPI(\"wechat\")\npublic interface Order {\n\n    /**\n     * \u652f\u4ed8\u65b9\u6cd5\n     *\n     * @return \u7ed3\u679c\n     */\n    String way();\n}\n\n// 2.\u63a5\u53e3\u5b9e\u73b0AlipayOrder\npublic class AlipayOrder implements Order {\n    @Override\n    public String way() {\n        System.out.println(\"--- \u652f\u4ed8\u5b9dway() ---\");\n        return \"\u652f\u4ed8\u5b9d\u652f\u4ed8\u65b9\u5f0f\";\n    }\n}\n\n// 3.\u63a5\u53e3\u5b9e\u73b0WeChatOrder\npublic class WeChatOrder implements Order {\n    @Override\n    public String way() {\n        System.out.println(\"--- \u5fae\u4fe1way() ---\");\n        return \"\u5fae\u4fe1\u652f\u4ed8\u65b9\u5f0f\";\n    }\n}\n```\n\n#### \u914d\u7f6e\n\n\u5728META-INF/dubbo\u76ee\u5f55\u4e0b\u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\uff08com.example.spidemo.dubbo.base.Order\uff09\n\n```\nwechat,wechat2=com.example.spidemo.dubbo.base.impl.WeChatOrder\nalipay=com.example.spidemo.dubbo.base.impl.AlipayOrder\n```\n\n#### \u6d4b\u8bd5\u7c7b\n\n```\npublic static void test1() {\n  ExtensionLoader<Order> loader = ExtensionLoader.getExtensionLoader(Order.class);\n\n  Order alipay = loader.getExtension(\"alipay\");\n  System.out.println(alipay.way());\n  //\u540c\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u591a\u4e2a\u540d\u79f0\uff0c\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\n  Order wechat = loader.getExtension(\"wechat\");\n  System.out.println(wechat.way());\n  Order wechat2 = loader.getExtension(\"wechat2\");\n  System.out.println(wechat2 == wechat);\n\n  /**\n   * \u7ed3\u679c:\n   * --- \u652f\u4ed8\u5b9dway() ---\n   * \u652f\u4ed8\u5b9d\u652f\u4ed8\u65b9\u5f0f\n   * --- \u5fae\u4fe1way() ---\n   * \u5fae\u4fe1\u652f\u4ed8\u65b9\u5f0f\n   * true\n   */\n}\n\npublic static void test2() {\n  ExtensionLoader<Order> loader = ExtensionLoader.getExtensionLoader(Order.class);\n  //\u9a8c\u8bc1\u4e0d\u6307\u5b9a\u524d\u7f00\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f1a\u62a5\u9519\n  Order alipay = loader.getDefaultExtension();\n  System.out.println(alipay.way());\n  /**\n   * \u7ed3\u679c:\n   * Exception in thread \"main\" java.lang.IllegalArgumentException: Extension name == null\n   * \tat org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:340)\n   * \tat com.example.spidemo.dubbo.adaptive.DubboSpiTest02.main(DubboSpiTest02.java:14)\n   */\n}\n```\n\n#### \u6d41\u7a0b\n\n```\n// 1.\u6784\u9020Order\u7684ExtensionLoader\uff0c\u5176\u4e2d\u8fd8\u6784\u9020\u4e86\u5bf9\u5e94\u7684ExtensionFactory -\u300bAdaptiveExtensionFactory();\n1.ExtensionLoader<Order> loader = ExtensionLoader.getExtensionLoader(Order.class);\n2.1.loader.getExtension(\"alipay\");\n2.2.loader.getDefaultExtension();\n2.3.loader.getAdaptiveExtension();\n2.4.loader.getActivateExtension(url, \"\", \"online\");\n```\n\n### ExtensionLoader\u7684\u6838\u5fc3\u5c5e\u6027\n\n```\n// \u52a0\u8f7d\u6587\u4ef6\u7684\u8def\u5f84\n// \"META-INF/services/\"\u3001\"META-INF/dubbo/\" \u3001\"META-INF/dubbo/internal/\"\nprivate static final String SERVICES_DIRECTORY = \"META-INF/services/\";\nprivate static final String DUBBO_DIRECTORY = \"META-INF/dubbo/\";\nprivate static final String DUBBO_INTERNAL_DIRECTORY = DUBBO_DIRECTORY + \"internal/\";\n\n// \u5b58\u50a8\u7684\u662f SPI\u63a5\u53e3\u7c7b\u548cExtensionLoader\u5bf9\u8c61\u7684\u6620\u5c04\u5173\u7cfb \u7f13\u5b58\u6c60\nprivate static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>();\n\n// \u5b58\u50a8\u7684\u662f \u6bcf\u4e2aSPI\u63a5\u53e3\u7684\u591a\u4e2a\u5b9e\u73b0\u7c7b\u548c\u5bf9\u5e94\u5b9e\u4f8b\u4e4b\u95f4\u7684\u5173\u7cfb\nprivate static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n\n// \u63a5\u53e3\u7684\u7c7b\u578b\nprivate final Class<?> type;\n// \u83b7\u53d6\u5de5\u5382\u7c7b\uff0c\u7528\u4e8e\u83b7\u53d6Spring\u5bb9\u5668\u4e2d\u7684Bean\nprivate final ExtensionFactory objectFactory;\n// \u6269\u5c55\u7c7b\u548c\u6269\u5c55\u540d\u79f0\u6620\u5c04\u5173\u7cfb\nprivate final ConcurrentMap<Class<?>, String> cachedNames = new ConcurrentHashMap<>();\n// \u6269\u5c55\u540d\u79f0\u548c\u6269\u5c55\u7c7b\u7c7b\u578b\u6620\u5c04\u5173\u7cfb\nprivate final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>();\n// \u6269\u5c55\u540d\u79f0\u548c\u81ea\u52a8\u6fc0\u6d3b\u6269\u5c55\u7c7b\u6620\u5c04\u5173\u7cfb\nprivate final Map<String, Object> cachedActivates = new ConcurrentHashMap<>();\n// \u6269\u5c55\u540d\u79f0\u548c\u6269\u5c55\u7c7b\u5b9e\u4f8b\u6620\u5c04\u5173\u7cfb\nprivate final ConcurrentMap<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>();\n// \u81ea\u9002\u5e94\u6269\u5c55\u7c7b\u5b9e\u4f8b\u7f13\u5b58\nprivate final Holder<Object> cachedAdaptiveInstance = new Holder<>();\n// \u81ea\u9002\u5e94\u6269\u5c55\u7c7b\nprivate volatile Class<?> cachedAdaptiveClass = null;\n// \u9ed8\u8ba4\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u540d\u79f0\nprivate String cachedDefaultName;\n// \u5305\u88c5\u6269\u5c55\u7c7b\u96c6\u5408\nprivate Set<Class<?>> cachedWrapperClasses;\n```\n\n### \u6e90\u7801\u89e3\u6790\n\n#### ExtensionLoader.getExtensionLoader(Order.class);\n\n##### \u6d41\u7a0b\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c06542f8a054dbe84ad5a3a38ab23e6~tplv-k3u1fbpfcp-watermark.image?)\n##### \u4ee3\u7801\u89e3\u6790\n\n```\n// 1.ExtensionLoader.getExtensionLoader\u6e90\u7801\npublic static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n  \t// \u63a5\u53e3\u7c7b\u4e0d\u80fd\u4e3a\u7a7a\n    if (type == null) {\n        throw new IllegalArgumentException(\"Extension type == null\");\n    }\n  \t// \u5fc5\u987b\u662f\u63a5\u53e3\n    if (!type.isInterface()) {\n        throw new IllegalArgumentException(\"Extension type (\" + type + \") is not an interface!\");\n    }\n  \t// \u5fc5\u987b\u6709@SPI\u6ce8\u89e3\n    if (!withExtensionAnnotation(type)) {\n        throw new IllegalArgumentException(\"Extension type (\" + type +\n                \") is not an extension, because it is NOT annotated with @\" \n                                           + SPI.class.getSimpleName() + \"!\");\n    }\n\t\t\n  \t// \u5728ExtensionLoader\u7f13\u5b58\u6c60\u4e2d\u83b7\u53d6\n    ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n    if (loader == null) {\n      \t// \u4e0d\u5b58\u5728\uff0c\u5219new\u4e00\u4e2a\u5bf9\u5e94SPI\u7684ExtensionLoader\uff08***\u91cd\u70b9***\uff09\n        EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));\n      \t// \u6dfb\u52a0\u5230\u7f13\u5b58\u6c60\u4e2d\n        loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n    }\n    return loader;\n}\n\n// withExtensionAnnotation\u65b9\u6cd5\nprivate static <T> boolean withExtensionAnnotation(Class<T> type) {\n    return type.isAnnotationPresent(SPI.class);\n}\n\n// 2.new ExtensionLoader<T>(type)\u6e90\u7801\u89e3\u6790\nprivate ExtensionLoader(Class<?> type) {\n  // \u8bbe\u7f6eSPI\u7684\u7c7b\u578b\n  this.type = type;\n  // type\u662f\u4e0d\u662f\u4e3aExtensionFactory\uff1f\u662f\u5219\u8fd4\u56denull\uff0c \u4e0d\u662f\u5219\u53bb\u83b7\u53d6\u4e00\u4e2aExtensionFactory\u7684ExtensionLoader\u7684\u9002\u914d\u5668\u6269\u5c55\u5668\n  objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());\n}\n\n// 3.getAdaptiveExtension()\u65b9\u6cd5\npublic T getAdaptiveExtension() {\n  \t// \u4ece\u5f53\u524d\u7684SPI\u7684ExtensionLoader\u4e2d\u7684\u7f13\u5b58\u6c60\u4e2d\u83b7\u53d6\u9002\u914d\u5668\n    Object instance = cachedAdaptiveInstance.get();\n  \t// dubbo check\n    if (instance == null) {\n        if (createAdaptiveInstanceError == null) {\n            synchronized (cachedAdaptiveInstance) {\n                instance = cachedAdaptiveInstance.get();\n                if (instance == null) {\n                    try {\n                      \t// \u521b\u5efa\u4e00\u4e2aSPI\u7684\u9002\u914d\u5668\u6269\u5c55\u5668\uff0c\u5e76\u653e\u5165\u7684\u7f13\u5b58\u6c60\u4e2d(***\u91cd\u70b9***)\n                        instance = createAdaptiveExtension();\n                        cachedAdaptiveInstance.set(instance);\n                    } catch (Throwable t) {\n                        createAdaptiveInstanceError = t;\n                        throw new IllegalStateException(\"Failed to create adaptive instance: \" + t.toString(), t);\n                    }\n                }\n            }\n        } else {\n            throw new IllegalStateException(\"Failed to create adaptive instance: \" + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);\n        }\n    }\n\n    return (T) instance;\n}\n\n// 4.createAdaptiveExtension()\u65b9\u6cd5\nprivate T createAdaptiveExtension() {\n    try {\n      \t// \u83b7\u53d6\u9002\u914d\u5668\u6269\u5c55\u5668\uff0c\u7136\u540e\u5728\u83b7\u53d6\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u518d\u6ce8\u5165\u5c5e\u6027(injectExtension\uff0cIOC\u7684\u5b9e\u73b0)\n        return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Can't create adaptive extension \" + type + \", cause: \" + e.getMessage(), e);\n    }\n}\n\n// 5.\u83b7\u53d6\u6269\u5c55\u5668\u7684\u9002\u914d\u5668\nprivate Class<?> getAdaptiveExtensionClass() {\n    // 1.\u52a0\u8f7d\u9ed8\u8ba4\u7684\u6269\u5c55\u5668\u7684\u540d\u79f0\n    // 2.\u52a0\u8f7d\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684SPI\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff1a\n    // 2.1.\u5982\u679c\u662f\u9002\u914d\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7684\u7f13\u5b58\u4e2d(PS:\u5728\u65b9\u6cd5\u4e0a\u52a0@Adaptive\uff0c\u4e0d\u4f1a\u88ab\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7f13\u5b58\u6c60\u4e2d)\n    // 2.2.\u5982\u679c\u662f\u88c5\u9970\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u88c5\u9970\u5668\u7684\u7f13\u5b58\u4e2d\n    // 2.3.\u52a0\u8f7d\u81ea\u52a8\u6fc0\u6d3b\u7684\u7f13\u5b58\u4e2d\n    // 2.4 \u52a0\u8f7d\u5230\u7f13\u5b58cachedNames\u4e2d\uff08k->class\uff0cv->name\uff09\n    getExtensionClasses();\n    if (cachedAdaptiveClass != null) {\n        return cachedAdaptiveClass;\n    }\n  \t// \u5982\u679c\u6ca1\u6709\u6269\u5c55\u5668\u7684\u9002\u914d\u5668\uff0c\u5219\u53bb\u52a8\u6001\u521b\u5efa\u4e00\u4e2a(\u6bd4\u8f83\u590d\u6742)\n    return cachedAdaptiveClass = createAdaptiveExtensionClass();\n}\n\n// 6. loadExtensionClasses()\u65b9\u6cd5\nprivate Map<String, Class<?>> loadExtensionClasses() {\n  // 1.\u83b7\u53d6SPI\u7684value\u83b7\u53d6\u9ed8\u8ba4\u540d\u5b57 \u52a0\u8f7d\u9ed8\u8ba4\u7684\u6269\u5c55\u5668\u7684\u540d\u79f0\n  cacheDefaultExtensionName();\n\n  // 2. \u52a0\u8f7d\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684SPI\u7684\u914d\u7f6e\u6587\u4ef6\n  // 2.1.\u5982\u679c\u662f\u9002\u914d\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7684\u7f13\u5b58\u4e2d\n \t// 2.2.\u5982\u679c\u662f\u88c5\u9970\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u88c5\u9970\u5668\u7684\u7f13\u5b58\u4e2d\n  // 2.3.\u628aname\u52a0\u8f7d\u81ea\u52a8\u6fc0\u6d3b\u7684\u7f13\u5b58\u4e2d\uff0c\u628aname\u5230SPI\u7684name\u7f13\u5b58\u6c60\uff0c\u628aSPI name\u548c\u7c7b\u7684\u5bf9\u5e94\u5173\u7cfb\u7f13\u5b58\u5230\n  Map<String, Class<?>> extensionClasses = new HashMap<>();\n  loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName());\n  loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\n  loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName());\n  loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\n  loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName());\n  loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\n  return extensionClasses;\n}\n\n// 7.loadDirectory\u52a0\u8f7d\u76ee\u5f55\u4e0b\u7684\u7c7b\nprivate void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type) {\n  String fileName = dir + type;\n  try {\n    Enumeration<java.net.URL> urls;\n    ClassLoader classLoader = findClassLoader();\n    if (classLoader != null) {\n      urls = classLoader.getResources(fileName);\n    } else {\n      urls = ClassLoader.getSystemResources(fileName);\n    }\n    if (urls != null) {\n      while (urls.hasMoreElements()) {\n        java.net.URL resourceURL = urls.nextElement();\n        loadResource(extensionClasses, classLoader, resourceURL);\n      }\n    }\n  } catch (Throwable t) {\n    logger.error(\"Exception occurred when loading extension class (interface: \" +\n                 type + \", description file: \" + fileName + \").\", t);\n  }\n}\n// 8.\u52a0\u8f7d\u8d44\u6e90loadResource\n// 9.\u52a0\u8f7d\u7c7b\n    private void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name) throws NoSuchMethodException {\n        if (!type.isAssignableFrom(clazz)) {\n            throw new IllegalStateException(\"Error occurred when loading extension class (interface: \" +\n                    type + \", class line: \" + clazz.getName() + \"), class \"\n                    + clazz.getName() + \" is not subtype of interface.\");\n        }\n      \t// \u5982\u679c\u662f\u9002\u914d\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7684\u7f13\u5b58\u4e2d\n        if (clazz.isAnnotationPresent(Adaptive.class)) {\n            cacheAdaptiveClass(clazz);\n        // \u5982\u679c\u662f\u88c5\u9970\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u88c5\u9970\u5668\u7684\u7f13\u5b58\u4e2d\n        } else if (isWrapperClass(clazz)) {\n            cacheWrapperClass(clazz);\n        } else {\n            clazz.getConstructor();\n            if (StringUtils.isEmpty(name)) {\n                name = findAnnotationName(clazz);\n                if (name.length() == 0) {\n                    throw new IllegalStateException(\"No such extension name for the class \" + clazz.getName() + \" in the config \" + resourceURL);\n                }\n            }\n\n            String[] names = NAME_SEPARATOR.split(name);\n            if (ArrayUtils.isNotEmpty(names)) {\n              \t// \u628aname\u52a0\u8f7d\u81ea\u52a8\u6fc0\u6d3b\u7684\u7f13\u5b58\u4e2d\n                cacheActivateClass(clazz, names[0]);\n                for (String n : names) {\n                  \t// \u628aname\u5230SPI\u7684name\u7f13\u5b58\u6c60\uff0c\u628aSPI name\u548c\u7c7b\u7684\u5bf9\u5e94\u5173\u7cfb\u7f13\u5b58\u5230\n                    cacheName(clazz, n);\n                    saveInExtensionClass(extensionClasses, clazz, n);\n                }\n            }\n        }\n    }\n```\n\n\u5176\u5b9e\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u4e0a\u8ff0\u53ea\u662f\u52a0\u8f7d\u7684\u6211\u4eecSPI\u5bf9\u5e94ExtensionLoader\u7684ExtensionFactory\u7684getAdaptiveExtension()\n\n--> AdaptiveExtensionFactory\n\n#### 1.\u5e38\u7528\u65b9\u6cd5extensionLoader.getExtension(\"alipay\");\n\n##### \u6d41\u7a0b\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cdde654d52e4d658c34b34b393cf444~tplv-k3u1fbpfcp-watermark.image?)\n##### \u4ee3\u7801\u89e3\u6790\n\n```\n// 1.\u83b7\u53d6Order\u7684\u540d\u79f0\u4e3a\"alipay\"\u7684SPI\npublic T getExtension(String name) {\n  // \u6821\u9a8c\n  if (StringUtils.isEmpty(name)) {\n    throw new IllegalArgumentException(\"Extension name == null\");\n  }\n  // \u5982\u679c\u540d\u5b57\u4e3atrue\uff0c\u5219\u8fd4\u56de\u9ed8\u8ba4\u7684SPI\n  if (\"true\".equals(name)) {\n    return getDefaultExtension();\n  }\n  // \u4ececachedInstances\u7f13\u5b58\u6c60\u4e2d\u83b7\u53d6\"alipay\"\u7684\u5b9e\u73b0\u7c7b\u3002\n  final Holder<Object> holder = getOrCreateHolder(name);\n  Object instance = holder.get();\n  // dubbo check\n  if (instance == null) {\n    synchronized (holder) {\n      instance = holder.get();\n      if (instance == null) {\n        // \u521b\u5efa\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u7684\u5b9e\u4f8bBean\uff0c\u5e76\u8bbe\u7f6e\u5230\u7f13\u5b58\u6c60\u4e2d\u3002\n        instance = createExtension(name);\n        holder.set(instance);\n      }\n    }\n  }\n  return (T) instance;\n}\n\n// 2.\u521b\u5efaExtension createExtension(name);\nprivate T createExtension(String name) {\n  // 1.\u52a0\u8f7d\u9ed8\u8ba4\u7684\u6269\u5c55\u5668\u7684\u540d\u79f0\n  // 2.\u52a0\u8f7d\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684SPI\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff1a\n  // 2.1.\u5982\u679c\u662f\u9002\u914d\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7684\u7f13\u5b58\u4e2d(PS:\u5728\u65b9\u6cd5\u4e0a\u52a0@Adaptive\uff0c\u4e0d\u4f1a\u88ab\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7f13\u5b58\u6c60\u4e2d)\n  // 2.2.\u5982\u679c\u662f\u88c5\u9970\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u88c5\u9970\u5668\u7684\u7f13\u5b58\u4e2d\n  // 2.3.\u52a0\u8f7d\u81ea\u52a8\u6fc0\u6d3b\u7684\u7f13\u5b58\u4e2d\n  // 2.4 \u52a0\u8f7d\u5230\u7f13\u5b58cachedNames\u4e2d\uff08k->class\uff0cv->name\uff09\n  Class<?> clazz = getExtensionClasses().get(name);\n  if (clazz == null) {\n    // \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u627e\u4e0d\u5230\uff0c\u5219\u629b\u5f02\u5e38\u3002\n    throw findException(name);\n  }\n  try {\n    // \u5b9e\u4f8b\u5316class\u5bf9\u8c61\uff0c\u5e76\u653e\u5728\u7f13\u5b58\u6c60\u4e2d\n    T instance = (T) EXTENSION_INSTANCES.get(clazz);\n    if (instance == null) {\n      EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());\n      instance = (T) EXTENSION_INSTANCES.get(clazz);\n    }\n    // \u6ce8\u5165\u6570\u636e\n    injectExtension(instance);\n    // \u5224\u65ad\u662f\u5426\u6709\u88c5\u9970\u5668\uff0c\u6709\u5219\u904d\u5386\u88c5\u9970\u5668\n    Set<Class<?>> wrapperClasses = cachedWrapperClasses;\n    if (CollectionUtils.isNotEmpty(wrapperClasses)) {\n      // \u4e00\u5957\u53c8\u4e00\u5957\n      for (Class<?> wrapperClass : wrapperClasses) {\n        instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n      }\n    }\n    return instance;\n  } catch (Throwable t) {\n    throw new IllegalStateException(\"Extension instance (name: \" + name + \", class: \" +\n                                    type + \") couldn't be instantiated: \" + t.getMessage(), t);\n  }\n}\n\n// 3.\u6ce8\u5165\u5c5e\u6027\nprivate T injectExtension(T instance) {\n  try {\n    if (objectFactory != null) {\n      for (Method method : instance.getClass().getMethods()) {\n        // \u53ea\u80fd\u6ce8\u5165setter\u65b9\u6cd5\u7684\u5c5e\u6027\u3002\n        if (isSetter(method)) {\n          /**\n           * Check {@link DisableInject} to see if we need auto injection for this property\n           */\n          if (method.getAnnotation(DisableInject.class) != null) {\n            continue;\n          }\n          Class<?> pt = method.getParameterTypes()[0];\n          if (ReflectUtils.isPrimitives(pt)) {\n            continue;\n          }\n          try {\n            String property = getSetterProperty(method);\n            // \u8c03\u7528AdaptiveExtensionFactory\u7684 \u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\u503c\u3002\n            Object object = objectFactory.getExtension(pt, property);\n            if (object != null) {\n              method.invoke(instance, object);\n            }\n          } catch (Exception e) {\n            logger.error(\"Failed to inject via method \" + method.getName()\n                         + \" of interface \" + type.getName() + \": \" + e.getMessage(), e);\n          }\n        }\n      }\n    }\n  } catch (Exception e) {\n    logger.error(e.getMessage(), e);\n  }\n  return instance;\n}\n\n// 3.1. \u8c03\u7528AdaptiveExtensionFactory\u7684getExtension(pt\uff0c property)\npublic <T> T getExtension(Class<T> type, String name) {\n  // \u5faa\u73af\u904d\u5386SpiExtensionFactory\u548cSpringExtensionFactory\u3002\n  for (ExtensionFactory factory : factories) {\n    T extension = factory.getExtension(type, name);\n    if (extension != null) {\n      return extension;\n    }\n  }\n  return null;\n}\n```\n\n#### 2.\u5e38\u7528\u65b9\u6cd5loader.getAdaptiveExtension();\n\n##### \u6d41\u7a0b\n\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e905ad8d287643719033bba135c41224~tplv-k3u1fbpfcp-watermark.image?)\n\n##### \u4ee3\u7801\u89e3\u6790\n\n```\n// loader.getAdaptiveExtension() ,\u6574\u4f53\u903b\u8f91\u548cgetExtension(\"alipay\") \u5dee\u4e0d\u591a\u3002\n// \u552f\u4e00\u6709\u533a\u522b\u7684\u662f\n// getAdaptiveExtension()\u662fcreateAdaptiveExtension()\n// getExtension(\"alipay\")\u662fcreateExtension(\"alipay\")\npublic T getAdaptiveExtension() {\n  // \u4ece\u9002\u914d\u5668\u7f13\u5b58\u6c60\u4e2d\u62ff\uff0c\u5982\u679c\u6ca1\u6709\u5219\u7528createAdaptiveExtension()\u751f\u6210\u4e00\u4e2a\uff0c\u518d\u8bbe\u7f6e\u5230\u7f13\u5b58\u6c60\u4e2d\u3002\n  Object instance = cachedAdaptiveInstance.get();\n  if (instance == null) {\n    if (createAdaptiveInstanceError == null) {\n      synchronized (cachedAdaptiveInstance) {\n        instance = cachedAdaptiveInstance.get();\n        if (instance == null) {\n          try {\n            // \u751f\u6210\u9002\u914d\u5668\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61instance\uff0c\u5e76\u8bbe\u7f6e\u5230\u7f13\u5b58\u4e2d\n            instance = createAdaptiveExtension();\n            cachedAdaptiveInstance.set(instance);\n          } catch (Throwable t) {\n            createAdaptiveInstanceError = t;\n            throw new IllegalStateException(\"Failed to create adaptive instance: \" + t.toString(), t);\n          }\n        }\n      }\n    } else {\n      throw new IllegalStateException(\"Failed to create adaptive instance: \" + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);\n    }\n  }\n\n  return (T) instance;\n}\n\n// 2.createAdaptiveExtension()\nprivate T createAdaptiveExtension() {\n  try {\n    return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n  } catch (Exception e) {\n    throw new IllegalStateException(\"Can't create adaptive extension \" + type + \", cause: \" + e.getMessage(), e);\n  }\n}\n\n// 3.getAdaptiveExtensionClass()\nprivate Class<?> getAdaptiveExtensionClass() {\n  // 1.\u52a0\u8f7d\u9ed8\u8ba4\u7684\u6269\u5c55\u5668\u7684\u540d\u79f0\n  // 2.\u52a0\u8f7d\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684SPI\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff1a\n  // 2.1.\u5982\u679c\u662f\u9002\u914d\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7684\u7f13\u5b58\u4e2d(PS:\u5728\u65b9\u6cd5\u4e0a\u52a0@Adaptive\uff0c\u4e0d\u4f1a\u88ab\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7f13\u5b58\u6c60\u4e2d)\n  // 2.2.\u5982\u679c\u662f\u88c5\u9970\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u88c5\u9970\u5668\u7684\u7f13\u5b58\u4e2d\n  // 2.3.\u52a0\u8f7d\u81ea\u52a8\u6fc0\u6d3b\u7684\u7f13\u5b58\u4e2d\n  // 2.4 \u52a0\u8f7d\u5230\u7f13\u5b58cachedNames\u4e2d\uff08k->class\uff0cv->name\uff09\n  getExtensionClasses();\n  // \u5982\u679c\u5728\u9002\u914d\u5668\u7684\u7f13\u5b58\u6c60\u6709\u5bf9\u5e94\u7684\u9002\u914d\u5668\u7c7b\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94\u7684\u9002\u914d\u5668\u7c7b\n  if (cachedAdaptiveClass != null) {\n    return cachedAdaptiveClass;\n  }\n  // \u5982\u679c\u5728\u9002\u914d\u5668\u7f13\u5b58\u6c60\u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u9002\u914d\u7c7b\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u3002\n  return cachedAdaptiveClass = createAdaptiveExtensionClass();\n}\n\n// 4.createAdaptiveExtensionClass() \u521b\u5efa\u4e00\u4e2a\u9002\u914d\u5668\u7c7b\nprivate Class<?> createAdaptiveExtensionClass() {\n  // \u751f\u6210\u9002\u914d\u5668\u7684\u6e90\u7801\n  String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();\n  // \u7c7b\u52a0\u8f7d\u5668\n  ClassLoader classLoader = findClassLoader();\n  // \u901a\u8fc7SPI\u83b7\u53d6\u7f16\u8bd1\u5668\u7684\u9002\u914d\u5668\u7c7b\uff0c\u518d\u52a8\u6001\u7f16\u8bd1\u8fd9\u4e2a\u9002\u914d\u5668\u7684\u6e90\u7801\uff0c\u751f\u6210\u7c7b\u3002\n  org.apache.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n  return compiler.compile(code, classLoader);\n}\n\n// 5.new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();\npublic String generate() {\n  // \u5982\u679c\u65b9\u6cd5\u4e2d\u6ca1\u6709@Adaptive\u6ce8\u89e3\uff0c\u5219\u629b\u5f02\u5e38\n  if (!hasAdaptiveMethod()) {\n    throw new IllegalStateException(\"No adaptive method exist on extension \" + type.getName() + \", refuse to create the adaptive class!\");\n  }\n\n  StringBuilder code = new StringBuilder();\n  // \u751f\u6210package\u4fe1\u606f\n  code.append(generatePackageInfo());\n  // \u751f\u6210import\u4fe1\u606f\n  code.append(generateImports());\n  // \u751f\u6210\u7c7b\u4fe1\u606f public class %s$Adaptive implements....\n  code.append(generateClassDeclaration());\n\n  // \u83b7\u53d6type\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u65b9\u6cd5\u4fe1\u606f public %s %s(%s) %s {%s}\n  Method[] methods = type.getMethods();\n  for (Method method : methods) {\n    code.append(generateMethod(method));\n  }\n  code.append(\"}\");\n\n  if (logger.isDebugEnabled()) {\n    logger.debug(code.toString());\n  }\n  return code.toString();\n}\n```\n\n#### 3.\u5e38\u7528\u65b9\u6cd5loader.getActivateExtension(url, \"\", \"online\");\u8bfe\u540e\u8ba8\u8bba\uff1a\n\n```\n// 1.\u751f\u6210\u81ea\u52a8\u6fc0\u6d3b\u7684\u6269\u5c55\u7c7b\u96c6\u5408\npublic List<T> getActivateExtension(URL url, String key, String group) {\n  // \u83b7\u53d6URL\u7684key\u5bf9\u5e94\u7684value\n  String value = url.getParameter(key);\n  // value\u5373name\uff0c\u53ef\u4ee5\u7528\"\uff0c\"\u5206\u9694\n  return getActivateExtension(url, StringUtils.isEmpty(value) ? null : COMMA_SPLIT_PATTERN.split(value), group);\n}\n\n// 2\uff0c\u83b7\u53d6getActivateExtension()\npublic List<T> getActivateExtension(URL url, String[] values, String group) {\n  List<T> exts = new ArrayList<>();\n  List<String> names = values == null ? new ArrayList<>(0) : Arrays.asList(values);\n  // \u540d\u5b57\u4e2d\u4e0d\u5305\u542b\"-default\"\n  if (!names.contains(REMOVE_VALUE_PREFIX + DEFAULT_KEY)) {\n    // 1.\u52a0\u8f7d\u9ed8\u8ba4\u7684\u6269\u5c55\u5668\u7684\u540d\u79f0\n    // 2.\u52a0\u8f7d\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684SPI\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff1a\n\t  // 2.1.\u5982\u679c\u662f\u9002\u914d\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7684\u7f13\u5b58\u4e2d(PS:\u5728\u65b9\u6cd5\u4e0a\u52a0@Adaptive\uff0c\u4e0d\u4f1a\u88ab\u52a0\u8f7d\u5230\u9002\u914d\u5668\u7f13\u5b58\u6c60\u4e2d)\n    // 2.2.\u5982\u679c\u662f\u88c5\u9970\u5668\uff0c\u5219\u52a0\u8f7d\u5230\u88c5\u9970\u5668\u7684\u7f13\u5b58\u4e2d\n    // 2.3.\u52a0\u8f7d\u81ea\u52a8\u6fc0\u6d3b\u7684\u7f13\u5b58\u4e2d(cachedActivates)\n    // 2.4 \u52a0\u8f7d\u5230\u7f13\u5b58cachedNames\u4e2d\uff08k->class\uff0cv->name\uff09\n    getExtensionClasses();\n    for (Map.Entry<String, Object> entry : cachedActivates.entrySet()) {\n      String name = entry.getKey();\n      Object activate = entry.getValue();\n\n      String[] activateGroup, activateValue;\n\n      if (activate instanceof Activate) {\n        activateGroup = ((Activate) activate).group();\n        activateValue = ((Activate) activate).value();\n      } else if (activate instanceof com.alibaba.dubbo.common.extension.Activate) {\n        // \u9002\u914dalibaba\u7248\u672c\u7684\uff0c\u73b0\u5728\u7684\u662fapache\u7248\u672c\n        activateGroup = ((com.alibaba.dubbo.common.extension.Activate) activate).group();\n        activateValue = ((com.alibaba.dubbo.common.extension.Activate) activate).value();\n      } else {\n        continue;\n      }\n      // activateGroup\u4e2d\u5305\u542b\u4e86group\n      if (isMatchGroup(group, activateGroup)) {\n        // \u83b7\u53d6\u6269\u5c55\u7c7b\u7684\u5b9e\u4f8b\n        T ext = getExtension(name);\n        if (!names.contains(name)\n            && !names.contains(REMOVE_VALUE_PREFIX + name)\n            && isActive(activateValue, url)) {\n          // \u7b26\u5408\u4e0a\u8ff0\u8981\u6c42\u5219\u52a0\u5230\u96c6\u5408\u4e2d\n          exts.add(ext);\n        }\n      }\n    }\n    // \u6839\u636e@Activate \u6392\u5e8f\n    exts.sort(ActivateComparator.COMPARATOR);\n  }\n  List<T> usrs = new ArrayList<>();\n  for (int i = 0; i < names.size(); i++) {\n    String name = names.get(i);\n    // value\u7684\u503c\u4e0d\u662f\u4ee5\"-\"\u5f00\u59cb\uff0c\u4e14 \u4e0d\u5305\u542b\"-\"+$name\n    if (!name.startsWith(REMOVE_VALUE_PREFIX)\n        && !names.contains(REMOVE_VALUE_PREFIX + name)) {\n      // \u5982\u679c\u540d\u5b57\u4e3a\"default\"\n      if (DEFAULT_KEY.equals(name)) {\n        if (!usrs.isEmpty()) {\n          exts.addAll(0, usrs);\n          usrs.clear();\n        }\n      } else {\n        // \u6839\u636ename\u83b7\u53d6Extension\u7684\u5b9e\u4f8b\uff0c\u5e76\u653e\u5165usrs\n        T ext = getExtension(name);\n        usrs.add(ext);\n      }\n    }\n  }\n  if (!usrs.isEmpty()) {\n    exts.addAll(usrs);\n  }\n  return exts;\n}\n```\n\n#### \u603b\u7ed3\n\nDubbo \u7684SPI\u7684\u4f18\u52bf\uff1a\n\n0.  \u6709\u7f13\u5b58\uff08\u90fd\u6709\u7f13\u5b58\uff09\n0.  \u53ef\u4ee5\u7ed3\u5408Spring\u5bb9\u5668\u5b9e\u73b0\u5c5e\u6027\u6ce8\u5165\u3002\n0.  \u901a\u8fc7wrapper \u88c5\u9970\u5668\u5b9e\u73b0\u7c7b\u4f3cAOP\u7684\u529f\u80fd\u3002\n0.  \u901a\u8fc7@Adaptive \u914d\u7f6e\u9002\u914d\u5668\u7684\u7c7b\uff0c\u5c31\u652f\u6301\u4e00\u4e2a\u573a\u666f\u4f7f\u7528\u591a\u79cd\u5b9e\u73b0\u7c7b\u3002",
    "mtime": "1660966625",
    "original_author": "",
    "original_type": 0,
    "rank_index": 5.74035982,
    "rtime": "1660966625",
    "status": 2,
    "tag_ids": [
      6809640408797167616,
      6809640404791590912
    ],
    "title": "Dubbo\u7684SPI\u673a\u5236\u7b80\u4ecb\u5206\u4eab",
    "user_id": "3879543765994920",
    "user_index": 7.888898584825661,
    "verify_status": 1,
    "view_count": 92,
    "visible_level": 0
  }