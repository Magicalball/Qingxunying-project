{
    "article_id": "7133790853532745741",
    "audit_status": 2,
    "brief_content": "\u643a\u624b\u521b\u4f5c\uff0c\u5171\u540c\u6210\u957f\uff01\u8fd9\u662f\u6211\u53c2\u4e0e\u300c\u6398\u91d1\u65e5\u65b0\u8ba1\u5212 \u00b7 8 \u6708\u66f4\u6587\u6311\u6218\u300d\u7684\u7b2c25\u5929\uff0c\u70b9\u51fb\u67e5\u770b\u6d3b\u52a8\u8be6\u60c5 \u9898\u76ee\u63cf\u8ff0 \u8fd9\u662f LeetCode \u4e0a\u7684 654. \u6700\u5927\u4e8c\u53c9\u6811 \uff0c\u96be\u5ea6\u4e3a \u4e2d\u7b49\u3002 Tag : \u300c\u4e8c\u53c9\u6811\u300d\u3001",
    "category_id": "6809637769959178254",
    "collect_count": 0,
    "comment_count": 0,
    "content": "",
    "cover_image": "https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35b22395480e43b391aaff28adf3a479~tplv-k3u1fbpfcp-watermark.image?",
    "ctime": "1660965183",
    "digg_count": 1,
    "display_count": 0,
    "draft_id": "7133790776705843237",
    "hot_index": 7,
    "is_english": 0,
    "is_gfw": 0,
    "is_hot": 0,
    "is_markdown": 1,
    "is_original": 1,
    "link_url": "",
    "mark_content": "\u643a\u624b\u521b\u4f5c\uff0c\u5171\u540c\u6210\u957f\uff01\u8fd9\u662f\u6211\u53c2\u4e0e\u300c\u6398\u91d1\u65e5\u65b0\u8ba1\u5212 \u00b7 8 \u6708\u66f4\u6587\u6311\u6218\u300d\u7684\u7b2c25\u5929\uff0c[\u70b9\u51fb\u67e5\u770b\u6d3b\u52a8\u8be6\u60c5](https://juejin.cn/post/7123120819437322247 \"https://juejin.cn/post/7123120819437322247\")\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u8fd9\u662f LeetCode \u4e0a\u7684 **[654. \u6700\u5927\u4e8c\u53c9\u6811](https://leetcode.cn/problems/maximum-binary-tree/solution/by-ac_oier-s0wc/)** \uff0c\u96be\u5ea6\u4e3a **\u4e2d\u7b49**\u3002\n\nTag : \u300c\u4e8c\u53c9\u6811\u300d\u3001\u300c\u9012\u5f52\u300d\u3001\u300c\u5206\u6cbb\u300d\u3001\u300c\u7ebf\u6bb5\u6811\u300d\u3001\u300c\u5355\u8c03\u6808\u300d\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u6574\u6570\u6570\u7ec4\u00a0`nums`\u3002\u00a0\u6700\u5927\u4e8c\u53c9\u6811\u00a0\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u7b97\u6cd5\u4ece\u00a0`nums` \u9012\u5f52\u5730\u6784\u5efa:\n\n1. \u521b\u5efa\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u5176\u503c\u4e3a\u00a0`nums` \u4e2d\u7684\u6700\u5927\u503c\u3002\n2. \u9012\u5f52\u5730\u5728\u6700\u5927\u503c\u00a0\u5de6\u8fb9\u00a0\u7684\u00a0\u5b50\u6570\u7ec4\u524d\u7f00\u4e0a\u00a0\u6784\u5efa\u5de6\u5b50\u6811\u3002\n3. \u9012\u5f52\u5730\u5728\u6700\u5927\u503c \u53f3\u8fb9 \u7684\u00a0\u5b50\u6570\u7ec4\u540e\u7f00\u4e0a\u00a0\u6784\u5efa\u53f3\u5b50\u6811\u3002\n\n\u8fd4\u56de\u00a0`nums` \u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002\n\n\u793a\u4f8b 1\uff1a\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1283dd18290543f2978258b83749b3da~tplv-k3u1fbpfcp-zoom-1.image)\n```\n\u8f93\u5165\uff1anums = [3,2,1,6,0,5]\n\n\u8f93\u51fa\uff1a[6,3,5,null,2,0,null,null,1]\n\n\u89e3\u91ca\uff1a\u9012\u5f52\u8c03\u7528\u5982\u4e0b\u6240\u793a\uff1a\n- [3,2,1,6,0,5] \u4e2d\u7684\u6700\u5927\u503c\u662f 6 \uff0c\u5de6\u8fb9\u90e8\u5206\u662f [3,2,1] \uff0c\u53f3\u8fb9\u90e8\u5206\u662f [0,5] \u3002\n    - [3,2,1] \u4e2d\u7684\u6700\u5927\u503c\u662f 3 \uff0c\u5de6\u8fb9\u90e8\u5206\u662f [] \uff0c\u53f3\u8fb9\u90e8\u5206\u662f [2,1] \u3002\n        - \u7a7a\u6570\u7ec4\uff0c\u65e0\u5b50\u8282\u70b9\u3002\n        - [2,1] \u4e2d\u7684\u6700\u5927\u503c\u662f 2 \uff0c\u5de6\u8fb9\u90e8\u5206\u662f [] \uff0c\u53f3\u8fb9\u90e8\u5206\u662f [1] \u3002\n            - \u7a7a\u6570\u7ec4\uff0c\u65e0\u5b50\u8282\u70b9\u3002\n            - \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5b50\u8282\u70b9\u662f\u4e00\u4e2a\u503c\u4e3a 1 \u7684\u8282\u70b9\u3002\n    - [0,5] \u4e2d\u7684\u6700\u5927\u503c\u662f 5 \uff0c\u5de6\u8fb9\u90e8\u5206\u662f [0] \uff0c\u53f3\u8fb9\u90e8\u5206\u662f [] \u3002\n        - \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5b50\u8282\u70b9\u662f\u4e00\u4e2a\u503c\u4e3a 0 \u7684\u8282\u70b9\u3002\n        - \u7a7a\u6570\u7ec4\uff0c\u65e0\u5b50\u8282\u70b9\u3002\n```\n\u793a\u4f8b 2\uff1a\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7ee8431242a48a9b219837ce6104b4e~tplv-k3u1fbpfcp-zoom-1.image)\n```\n\u8f93\u5165\uff1anums = [3,2,1]\n\n\u8f93\u51fa\uff1a[3,null,2,null,1]\n```\n\n\u63d0\u793a\uff1a\n* $1 <= nums.length <= 1000$\n* $0 <= nums[i] <= 1000$\n* `nums` \u4e2d\u7684\u6240\u6709\u6574\u6570 \u4e92\u4e0d\u76f8\u540c\n\n## \u57fa\u672c\u5206\u6790\n\n\u6839\u636e\u9898\u76ee\u63cf\u8ff0\uff0c\u53ef\u77e5\u8be5\u95ee\u9898\u672c\u8d28\u662f\u300c\u533a\u95f4\u6c42\u6700\u503c\u300d\u95ee\u9898\uff08RMQ\uff09\u3002\n\n\u800c\u6c42\u89e3 RMQ \u6709\u591a\u79cd\u65b9\u5f0f\uff1a\u9012\u5f52\u5206\u6cbb\u3001\u6709\u5e8f\u96c6\u5408/ST/\u7ebf\u6bb5\u6811 \u548c \u5355\u8c03\u6808\u3002\n\n\u5176\u4e2d\u9012\u5f52\u5206\u6cbb\u505a\u6cd5\u590d\u6742\u5ea6\u4e3a $O(n^2)$\uff0c\u5bf9\u672c\u9898\u6765\u8bf4\u53ef\u8fc7\uff1b\u800c\u5176\u4f59\u8bf8\u5982\u7ebf\u6bb5\u6811\u7684\u65b9\u5f0f\u9700\u8981 $O(n\\log{n})$ \u7684\u5efa\u6811\u548c\u5355\u6b21 $O(\\log{n})$ \u7684\u67e5\u8be2\uff0c\u6574\u4f53\u590d\u6742\u5ea6\u4e3a $O(n\\log{n})$\uff1b\u5355\u8c03\u6808\u89e3\u6cd5\u5219\u662f\u6574\u4f53\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n## \u9012\u5f52\u5206\u6cbb\n\n\u8bbe\u7f6e\u9012\u5f52\u51fd\u6570 `TreeNode build(int[] nums, int l, int r)` \u542b\u4e49\u4e3a\u4ece `nums` \u4e2d\u7684 $[l, r]$ \u4e0b\u6807\u8303\u56f4\u8fdb\u884c\u6784\u5efa\uff0c\u8fd4\u56de\u6784\u5efa\u540e\u7684\u5934\u7ed3\u70b9\u3002\n\n\u5f53 $l > r$ \u65f6\uff0c\u8fd4\u56de\u7a7a\u8282\u70b9\uff0c\u5426\u5219\u5728 $[l, r]$ \u4e2d\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u6700\u5927\u503c\u5bf9\u5e94\u7684\u4e0b\u6807 `idx` \u5e76\u521b\u5efa\u5bf9\u5e94\u7684\u5934\u7ed3\u70b9\uff0c\u9012\u5f52\u6784\u5efa $[l, idx - 1]$ \u548c $[idx + 1, r]$ \u4f5c\u4e3a\u5934\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u3002\n\nJava \u4ee3\u7801\uff1a\n```Java\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        return build(nums, 0, nums.length - 1);\n    }\n    TreeNode build(int[] nums, int l, int r) {\n        if (l > r) return null;\n        int idx = l;\n        for (int i = l; i <= r; i++) {\n            if (nums[i] > nums[idx]) idx = i;\n        }\n        TreeNode ans = new TreeNode(nums[idx]);\n        ans.left = build(nums, l, idx - 1);\n        ans.right = build(nums, idx + 1, r);\n        return ans;\n    }\n}\n```\nTypeScript \u4ee3\u7801\uff1a\n```TypeScript\nfunction constructMaximumBinaryTree(nums: number[]): TreeNode | null {\n    return build(nums, 0, nums.length - 1)\n};\nfunction build(nums: number[], l: number, r: number): TreeNode | null {\n    if (l > r) return null\n    let idx = l\n    for (let i = l; i <= r; i++) {\n        if (nums[i] > nums[idx]) idx = i\n    }\n    const ans = new TreeNode(nums[idx])\n    ans.left = build(nums, l, idx - 1)\n    ans.right = build(nums, idx + 1, r)\n    return ans\n}\n```\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u5ffd\u7565\u9012\u5f52\u5e26\u6765\u7684\u989d\u5916\u7a7a\u95f4\u5f00\u9500\uff0c\u590d\u6742\u5ea6\u4e3a $O(1)$\n\n## \u7ebf\u6bb5\u6811 \n\n\u62bd\u8c61\u6210\u533a\u95f4\u6c42\u548c\u95ee\u9898\u540e\uff0c\u6d89\u53ca\u300c\u5355\u70b9\u4fee\u6539\u300d\u548c\u300c\u533a\u95f4\u67e5\u8be2\u300d\uff0c\u518d\u7ed3\u5408\u8282\u70b9\u6570\u91cf\u4e3a $1e3$\uff0c\u53ef\u4f7f\u7528 `build` $4n$ \u7a7a\u95f4\u4e0d\u5e26\u61d2\u6807\u8bb0\u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u6c42\u89e3\u3002\n\n\u8bbe\u8ba1\u7ebf\u6bb5\u6811\u8282\u70b9 `Node` \u5305\u542b\u5c5e\u6027\uff1a\u5de6\u8282\u70b9\u4e0b\u6807 `l`\u3001\u53f3\u8282\u70b9\u4e0b\u6807 `r` \u548c\u5f53\u524d\u533a\u95f4 $[l, r]$ \u6240\u5bf9\u5e94\u7684\u6700\u503c $val$\u3002\n\n\u6784\u5efa\u7ebf\u6bb5\u6811\u7684\u8fc7\u7a0b\u4e3a\u57fa\u672c\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\u5185\u5bb9\uff0c\u800c\u6784\u5efa\u7b54\u6848\u6811\u7684\u8fc7\u7a0b\u4e0e\u9012\u5f52\u5206\u6cbb\u8fc7\u7a0b\u7c7b\u578b\uff08\u5c06\u7ebf\u6027\u627e\u6700\u503c\u8fc7\u7a0b\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff09\u3002\n\nJava \u4ee3\u7801\uff1a\n```Java\nclass Solution {\n    class Node {\n        int l, r, val;\n        Node (int _l, int _r) {\n            l = _l; r = _r;\n        }\n    }\n    void build(int u, int l, int r) {\n        tr[u] = new Node(l, r);\n        if (l == r) return ;\n        int mid = l + r >> 1;\n        build(u << 1, l, mid);\n        build(u << 1 | 1, mid + 1, r);\n    }\n    void update(int u, int x, int v) {\n        if (tr[u].l == x && tr[u].r == x) {\n            tr[u].val = Math.max(tr[u].val, v);\n            return ;\n        }\n        int mid = tr[u].l + tr[u].r >> 1;\n        if (x <= mid) update(u << 1, x, v);\n        else update(u << 1 | 1, x, v);\n        pushup(u);\n    }\n    int query(int u, int l, int r) {\n        if (l <= tr[u].l && tr[u].r <= r) return tr[u].val;\n        int mid = tr[u].l + tr[u].r >> 1, ans = 0;\n        if (l <= mid) ans = query(u << 1, l, r);\n        if (r > mid) ans = Math.max(ans, query(u << 1 | 1, l, r));\n        return ans;\n    }\n    void pushup(int u) {\n        tr[u].val = Math.max(tr[u << 1].val, tr[u << 1 | 1].val);\n    }\n    Node[] tr = new Node[4010];\n    int[] hash = new int[1010];\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        int n = nums.length;\n        build(1, 1, n);\n        for (int i = 0; i < n; i++) {\n            hash[nums[i]] = i + 1;\n            update(1, i + 1, nums[i]);\n        }\n        return dfs(nums, 1, n);\n    }\n    TreeNode dfs(int[] nums, int l, int r) {\n        if (l > r) return null;\n        int val = query(1, l, r), idx = hash[val];\n        TreeNode ans = new TreeNode(val);\n        ans.left = dfs(nums, l, idx - 1);\n        ans.right = dfs(nums, idx + 1, r);\n        return ans;\n    }\n}\n```\nTypeScript \u4ee3\u7801\uff1a\n```TypeScript\nclass TNode {\n    l = 0; r = 0; val = 0;\n    constructor (_l: number, _r: number) {\n        this.l = _l; this.r = _r;\n    }\n}\nconst tr: TNode[] = new Array<TNode>(4010)\nconst hash: number[] = new Array<number>(1010)\nfunction constructMaximumBinaryTree(nums: number[]): TreeNode | null {\n    const n = nums.length\n    build(1, 1, n)\n    for (let i = 0; i < n; i++) {\n        hash[nums[i]] = i + 1\n        update(1, i + 1, nums[i])\n    }\n    return dfs(nums, 1, n)\n};\nfunction build(u: number, l: number, r: number): void {\n    tr[u] = new TNode(l, r)\n    if (l == r) return \n    const mid = l + r >> 1\n    build(u << 1, l, mid)\n    build(u << 1 | 1, mid + 1, r)\n}\nfunction update(u: number, x: number, v: number): void {\n    if (tr[u].l == x && tr[u].r == x) {\n        tr[u].val = Math.max(tr[u].val, v)\n        return \n    }\n    const mid = tr[u].l + tr[u].r >> 1\n    if (x <= mid) update(u << 1, x, v)\n    else update(u << 1 | 1, x, v)\n    pushup(u)\n}\nfunction query(u: number, l: number, r: number): number {\n    if (l <= tr[u].l && tr[u].r <= r) return tr[u].val\n    let mid = tr[u].l + tr[u].r >> 1, ans = 0\n    if (l <= mid) ans = query(u << 1, l, r)\n    if (r > mid) ans = Math.max(ans, query(u << 1 | 1, l, r))\n    return ans\n}\nfunction pushup(u: number): void {\n    tr[u].val = Math.max(tr[u << 1].val, tr[u << 1 | 1].val)\n}\nfunction dfs(nums: number[], l: number, r: number): TreeNode {\n    if (l > r) return null\n    let val = query(1, l, r), idx = hash[val]\n    const ans = new TreeNode(val)\n    ans.left = dfs(nums, l, idx - 1)\n    ans.right = dfs(nums, idx + 1, r)\n    return ans\n}\n\n```\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6784\u5efa\u7ebf\u6bb5\u6811\u590d\u6742\u5ea6\u4e3a $O(n\\log{n})$\uff1b\u6784\u9020\u7b54\u6848\u6811\u590d\u6742\u5ea6\u4e3a $O(n\\log{n})$\u3002\u6574\u4f53\u590d\u6742\u5ea6\u4e3a $O(n\\log{n})$\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\n\n## \u5355\u8c03\u6808\n\n\u66f4\u8fdb\u4e00\u6b65\uff0c\u6839\u636e\u9898\u76ee\u5bf9\u6811\u7684\u6784\u5efa\u7684\u63cf\u8ff0\u53ef\u77e5\uff0c`nums` \u4e2d\u7684\u4efb\u4e8c\u8282\u70b9\u6240\u5728\u6784\u5efa\u6811\u7684\u6c34\u5e73\u622a\u9762\u4e0a\u7684\u4f4d\u7f6e\u4ec5\u7531\u4e0b\u6807\u5927\u5c0f\u51b3\u5b9a\u3002\n\n\u4e0d\u96be\u60f3\u5230\u53ef\u62bd\u8c61\u4e3a\u627e\u6700\u8fd1\u5143\u7d20\u95ee\u9898\uff0c\u53ef\u4f7f\u7528\u5355\u8c03\u6808\u6c42\u89e3\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u524d\u5f80\u540e\u5904\u7406\u6240\u6709\u7684 $nums[i]$\uff0c\u82e5\u5b58\u5728\u6808\u9876\u5143\u7d20\u5e76\u4e14\u6808\u9876\u5143\u7d20\u7684\u503c\u6bd4\u5f53\u524d\u503c\u8981\u5c0f\uff0c\u6839\u636e\u6211\u4eec\u4ece\u524d\u5f80\u540e\u5904\u7406\u7684\u903b\u8f91\uff0c\u53ef\u786e\u5b9a\u6808\u9876\u5143\u7d20\u53ef\u4f5c\u4e3a\u5f53\u524d $nums[i]$ \u5bf9\u5e94\u8282\u70b9\u7684\u5de6\u8282\u70b9\uff0c\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u6700\u7ec8 $nums[i]$ \u7684\u5de6\u8282\u70b9\u4e3a $[0, i - 1]$ \u8303\u56f4\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u6784\u5efa $nums[i]$ \u8282\u70b9\u4e0e\u5176\u5de6\u8282\u70b9\u7684\u5173\u7cfb\u65f6\uff0c$[0, i - 1]$ \u4e2d\u7684\u6700\u5927\u503c\u6700\u540e\u51fa\u961f\uff0c\u6b64\u65f6\u53ef\u77e5\u5bb9\u5668\u6808\u5177\u6709\u300c\u5355\u8c03\u9012\u51cf\u300d\u7279\u6027\u3002\u57fa\u4e8e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u51fa\uff0c\u5f53\u5904\u7406\u5b8c $nums[i]$ \u8282\u70b9\u4e0e\u5176\u5de6\u8282\u70b9\u5173\u7cfb\u540e\uff0c\u53ef\u660e\u786e $nums[i]$ \u53ef\u4f5c\u4e3a\u672a\u51fa\u6808\u7684\u6808\u9876\u5143\u7d20\u7684\u53f3\u8282\u70b9\u3002\n\n> \u4e00\u4e9b\u7ec6\u8282\uff1a`Java` \u5bb9\u6613\u4f7f\u7528 `ArrayDeque` \u5145\u5f53\u5bb9\u5668\uff0c\u4f46\u4e3a\u4e0e `TS` \u4fdd\u5b58\u4e00\u81f4\uff0c\u4e24\u8005\u5747\u4f7f\u7528\u6570\u7ec4\u5145\u5f53\u5bb9\u5668\u3002\n\nJava \u4ee3\u7801\uff1a\n```Java\nclass Solution {\n    static TreeNode[] stk = new TreeNode[1010];\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        int he = 0, ta = 0;\n        for (int x : nums) {\n            TreeNode node = new TreeNode(x);\n            while (he < ta && stk[ta - 1].val < x) node.left = stk[--ta];\n            if (he < ta) stk[ta - 1].right = node;\n            stk[ta++] = node;\n        }\n        return stk[0];\n    }\n}\n```\nTypeScript \u4ee3\u7801\uff1a\n```TypeScript\nconst stk = new Array<TreeNode>(1010)\nfunction constructMaximumBinaryTree(nums: number[]): TreeNode | null {\n    let he = 0, ta = 0\n    for (const x of nums) {\n        const node = new TreeNode(x)\n        while (he < ta && stk[ta - 1].val < x) node.left = stk[--ta]\n        if (he < ta) stk[ta - 1].right = node\n        stk[ta++] = node\n    }\n    return stk[0]\n};\n```\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\n* \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\n\n## \u6700\u540e\n\n\u8fd9\u662f\u6211\u4eec\u300c\u5237\u7a7f LeetCode\u300d\u7cfb\u5217\u6587\u7ae0\u7684\u7b2c `No.654` \u7bc7\uff0c\u7cfb\u5217\u5f00\u59cb\u4e8e 2021/01/01\uff0c\u622a\u6b62\u4e8e\u8d77\u59cb\u65e5 LeetCode \u4e0a\u5171\u6709 1916 \u9053\u9898\u76ee\uff0c\u90e8\u5206\u662f\u6709\u9501\u9898\uff0c\u6211\u4eec\u5c06\u5148\u628a\u6240\u6709\u4e0d\u5e26\u9501\u7684\u9898\u76ee\u5237\u5b8c\u3002\n\n\u5728\u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\u91cc\u9762\uff0c\u9664\u4e86\u8bb2\u89e3\u89e3\u9898\u601d\u8def\u4ee5\u5916\uff0c\u8fd8\u4f1a\u5c3d\u53ef\u80fd\u7ed9\u51fa\u6700\u4e3a\u7b80\u6d01\u7684\u4ee3\u7801\u3002\u5982\u679c\u6d89\u53ca\u901a\u89e3\u8fd8\u4f1a\u76f8\u5e94\u7684\u4ee3\u7801\u6a21\u677f\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5404\u4f4d\u540c\u5b66\u80fd\u591f\u7535\u8111\u4e0a\u8fdb\u884c\u8c03\u8bd5\u548c\u63d0\u4ea4\u4ee3\u7801\uff0c\u6211\u5efa\u7acb\u4e86\u76f8\u5173\u7684\u4ed3\u5e93\uff1ahttps://github.com/SharingSource/LogicStack-LeetCode \u3002\n\n\u5728\u4ed3\u5e93\u5730\u5740\u91cc\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u7cfb\u5217\u6587\u7ae0\u7684\u9898\u89e3\u94fe\u63a5\u3001\u7cfb\u5217\u6587\u7ae0\u7684\u76f8\u5e94\u4ee3\u7801\u3001LeetCode \u539f\u9898\u94fe\u63a5\u548c\u5176\u4ed6\u4f18\u9009\u9898\u89e3\u3002\n\n\u66f4\u591a\u66f4\u5168\u66f4\u70ed\u95e8\u7684\u300c\u7b14\u8bd5/\u9762\u8bd5\u300d\u76f8\u5173\u8d44\u6599\u53ef\u8bbf\u95ee\u6392\u7248\u7cbe\u7f8e\u7684 [\u5408\u96c6\u65b0\u57fa\u5730](https://www.acoier.com/archives/) \ud83c\udf89\ud83c\udf89\n",
    "mtime": "1660965905",
    "original_author": "",
    "original_type": 0,
    "rank_index": 6.51452873,
    "rtime": "1660965904",
    "status": 2,
    "tag_ids": [
      6809640408797167616,
      6809640445233070080,
      6809640499062767616
    ],
    "title": "\u6c42\u89e3 RMQ \u7684\u51e0\u79cd\u65b9\u5f0f :\u300c\u9012\u5f52\u5206\u6cbb\u300d&\u300c\u7ebf\u6bb5\u6811\u300d&\u300c\u5355\u8c03\u6808\u300d",
    "user_id": "2612095355996743",
    "user_index": 8.532308782457594,
    "verify_status": 1,
    "view_count": 125,
    "visible_level": 0
  }